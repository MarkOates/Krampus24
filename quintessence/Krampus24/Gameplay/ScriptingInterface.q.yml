properties:


  - name: on_entity_collision_callbacks
    type: std::map<void*, std::function<void()>>
    init_with: '{}'
    exposed: true


methods:


  - name: game_event_func
    virtual: true
    parameters:
      - name: game_event
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    guards: [ game_event ]
    body: |
      // Override in the derived class
      return;


  - name: build_audio_controller_sound_effect_list
    virtual: true
    type: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    body: |
      // Override in the derived class
      // EXAMPLE:
      //std::map<std::string, AllegroFlare::AudioRepositoryElement> sound_effect_elements = {
         //{ "open_metal_door", { "door-01-opening.ogg", false, "restart" } },
      //};
      //return sound_effect_elements;
      return {};


  - name: build_audio_controller_music_track_list
    virtual: true
    type: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    body: |
      // Override in the derived class
      // EXAMPLE:
      //std::map<std::string, AllegroFlare::AudioRepositoryElement> sound_effect_elements = {
         //{ "open_metal_door", { "door-01-opening.ogg", false, "restart" } },
      //};
      //return sound_effect_elements;
      return {};


  - name: render_hud
    virtual: true
    body: |
      return;


  - name: draw_inspect_hint
    virtual: true
    parameters:
      - name: inspect_hint_text
        type: std::string
        default_argument: '"[unset-inspect_hint_text]"'
    body: |
      // TODO: Consider moving all this inspect hint logic into the scripting interface
      return;


  - name: update_step
    virtual: true
    parameters:
      - name: time_now
        type: double
        default_argument: 0.0f
      - name: delta_time
        type: double
        default_argument: 1.0f
    body: |
      // Override in the derived class
      return;


  - name: end_state_achieved
    type: bool
    virtual: true
    body: |
      return false;


  - name: build_dialog_node_bank
    type: AllegroFlare::DialogTree::NodeBank
    virtual: true
    body: |
      // Override in the derived class
      return {};


  - name: interact_with_focused_object
    type: bool
    virtual: true
    parameters:
      - name: inspectable_entity_that_player_is_currently_colliding_with
        type: Krampus24::Gameplay::Entities::Base*
        default_argument: nullptr
    body: |
      // Return "true" if an interaction occurred (otherwise it will indicate to the Gameplay/Screen that nothing
      // happened, it may play a "no interaction" sound, for example)
      return false;


  - name: has_on_collision_callback
    type: bool
    parameters:
      - name: entity
        type: void*
        default_argument: nullptr
    body: |
      return on_entity_collision_callbacks.find(entity) != on_entity_collision_callbacks.end();


  - name: call_on_collision_callback
    parameters:
      - name: entity
        type: void*
        default_argument: nullptr
    guards: [ has_on_collision_callback(entity) ]
    body: |
      on_entity_collision_callbacks[entity]();
      return;


  - name: create_arbitrary_storyboard_pages_by_identifier
    type: std::vector<AllegroFlare::Elements::StoryboardPages::Base *>
    virtual: true
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      // Override in the derived class
      return {};


dependencies:


  - symbol: Krampus24::Gameplay::Entities::Base
    headers: [ Krampus24/Gameplay/Entities/Base.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeBank
    headers: [ AllegroFlare/DialogTree/NodeBank.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::Elements::StoryboardPages::Base
    headers: [ AllegroFlare/Elements/StoryboardPages/Base.hpp ]
  - symbol: Krampus24::BlenderBlockingLoaderEntity
    headers: [ Krampus24/BlenderBlockingLoaderEntity.hpp ]
  - symbol: AllegroFlare::AudioRepositoryElement
    headers: [ AllegroFlare/AudioRepositoryElement.hpp ]


