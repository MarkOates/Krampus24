parent_classes:


  - class: Krampus24::Gameplay::Entities::Base
    scope: public
    init_with: ''


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr

  - name: initial_position
    type: AllegroFlare::Vec3D
    init_with: AllegroFlare::Vec3D(0, 0, 0)

  - name: left_door
    type: Krampus24::Gameplay::Entities::Base*
    init_with: nullptr

  - name: right_door
    type: Krampus24::Gameplay::Entities::Base*
    init_with: nullptr

  - name: open_position
    type: float
    init_with: 0.0f
    setter: explicit

  - name: speed
    type: float
    init_with: 0.0165f

  - name: state
    type: uint32_t
    init_with: STATE_UNDEF
    getter: true
    setter: explicit

  - name: state_is_busy
    type: bool
    init_with: false

  - name: state_changed_at
    type: float
    init_with: 0.0f

  - name: initialized
    type: bool
    init_with: false

  - name: BLENDER_IDENTIFIER
    type: char*
    init_with: '(char*)"door"'
    static: true
    constexpr: true

  - name: DOOR_OPEN_SAMPLE_IDENTIFIER
    type: char*
    init_with: '(char*)"door-01-opening.ogg"'
    static: true
    constexpr: true


enums:


  - name: State
    enumerators:
      - STATE_UNDEF
      - STATE_OPENING
      - STATE_OPEN
      - STATE_CLOSING
      - STATE_CLOSED


methods:


  - name: construct
    static: true
    type: std::vector<Krampus24::Gameplay::Entities::Base*>
    parameters:
      - name: model_bin
        type: AllegroFlare::ModelBin*
        default_argument: nullptr
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
      - name: initial_position
        type: AllegroFlare::Vec3D
        default_argument: AllegroFlare::Vec3D(0, 0, 0)
      - name: rotation
        type: float
        default_argument: 0.0f
    guards: [ model_bin, bitmap_bin, event_emitter ]
    body: |
      // Main entity
      Krampus24::Gameplay::Entities::Door* result = new Krampus24::Gameplay::Entities::Door;
      //result->model = model_bin->auto_get("door-01.obj");
      //result->texture = bitmap_bin->auto_get("entities_texture-01.png");
      result->affected_by_environmental_forces = false;
      result->collides_with_player = true;
      result->placement.position = initial_position;
      result->placement.position.y += 0.001f; // Move slightly up
      result->placement.align = { 0.0, 0.0, 0.0 }; // Not sure how this will make sense
      result->placement.size = { 10.0, 10.0, 10.0 };
      result->aabb3d.set_max(result->placement.size);
      result->aabb3d_alignment = { 0.5, 0.005, 0.5 }; // Just slightly below the floor
      result->initial_position = initial_position;
      result->placement.rotation.y = rotation;

      // Left door
      result->left_door = new Krampus24::Gameplay::Entities::Base;
      result->left_door->model = model_bin->auto_get("door-01-left_door.obj");
      result->left_door->texture = bitmap_bin->auto_get("entities_texture-01.png");
      result->left_door->affected_by_environmental_forces = false;
      result->left_door->collides_with_player = false;
      result->left_door->placement.position = { 0.0, 0.0, 0.0 };
      result->left_door->placement.align = { 0.0, 0.0, 0.0 }; // Not sure how this will make sense
      result->left_door->placement.size = { 0, 0, 0 };
      //result->left_door->placement.rotation.y = rotation;
      result->left_door->visible = false;
      //result->left_door->active = false;

      // Right door
      result->right_door = new Krampus24::Gameplay::Entities::Base;
      result->right_door->model = model_bin->auto_get("door-01-right_door.obj");
      result->right_door->texture = bitmap_bin->auto_get("entities_texture-01.png");
      result->right_door->affected_by_environmental_forces = false;
      result->right_door->collides_with_player = false;
      result->right_door->placement.position = { 0.0, 0.0, 0.0 };
      result->right_door->placement.align = { 0.0, 0.0, 0.0 }; // Not sure how this will make sense
      result->right_door->placement.size = { 0, 0, 0 };
      //result->right_door->placement.rotation.y = rotation;
      result->right_door->visible = false;
      //result->right_door->active = false;

      // Preload the samples
      //result->sample_bin = sample_bin;
      //sample_bin->preload(DOOR_OPEN_SAMPLE_IDENTIFIER);
      result->event_emitter = event_emitter;
      

      result->initialized = true;
      result->set_state(STATE_CLOSED);

      return { result, result->left_door, result->right_door };


  - name: draw
    virtual: true
    override: true
    body: |
      placement.start_transform();
      
      right_door->placement.start_transform();
      right_door->model->set_texture(right_door->texture);
      right_door->model->draw();
      right_door->placement.restore_transform();

      left_door->placement.start_transform();
      left_door->model->set_texture(left_door->texture);
      left_door->model->draw();
      left_door->placement.restore_transform();

      placement.restore_transform();
      return;


  - name: set_open_position
    parameters:
      - name: open_position
        type: float
        default_argument: 1.0f
    body: |
      open_position = std::max(std::min(1.0f, open_position), 0.0f);
      this->open_position = open_position;
      left_door->placement.position.z = open_position * 2;
      right_door->placement.position.z = -open_position * 2;
      return;


  - name: on_enter_player_bbox_collision
    virtual: true
    override: true
    parameters:
      - name: player_entity
        type: Krampus24::Gameplay::Entities::Base*
        default_argument: nullptr
    body: |
      set_state(STATE_OPENING);
      return;


  - name: on_exit_player_bbox_collision
    virtual: true
    override: true
    parameters:
      - name: player_entity
        type: Krampus24::Gameplay::Entities::Base*
        default_argument: nullptr
    body: |
      set_state(STATE_CLOSING);
      return;


  - name: on_time_step
    virtual: true
    override: true
    guards: [ initialized ]
    parameters:
      - name: time_step
        type: double
        default_argument: 0.0f
      - name: time_now
        type: double
        default_argument: 0.0f
    body: |
      update_state(time_step, time_now);
      return;
    body_dependency_symbols:
      - std::sin


  - name: play_open_door_sound_effect
    body: |
      //sample_bin->operator[](DOOR_OPEN_SAMPLE_IDENTIFIER)->play();
      event_emitter->emit_play_sound_effect_event("open_metal_door");
      return;


  - name: build_audio_controller_sound_effect_list
    static: true
    type: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    body: |
      std::map<std::string, AllegroFlare::AudioRepositoryElement> sound_effect_elements = {
         { "open_metal_door", { "door-01-opening.ogg", false, "restart" } },
      };
      return sound_effect_elements;


  - name: set_state
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
      - name: override_if_busy
        type: bool
        default_argument: false
    guards: [ initialized, is_valid_state(state) ]
    body: |
      if (this->state == state) return;
      if (!override_if_busy && state_is_busy) return;
      uint32_t previous_state = this->state;

      this->state = state;
      state_changed_at = al_get_time();

      switch (state)
      {
         case STATE_OPENING: {
            play_open_door_sound_effect();
            //sample_bin->operator[](DOOR_OPEN_SAMPLE_IDENTIFIER)->play();
            //set_state(STATE_OPEN);
         } break;

         case STATE_OPEN: {
            set_open_position(1.0f);
            //sample_bin->operator[](DOOR_OPEN_SAMPLE_IDENTIFIER)->play();
         } break;

         case STATE_CLOSING: {
            play_open_door_sound_effect();
            //sample_bin->operator[](DOOR_OPEN_SAMPLE_IDENTIFIER)->play();
            //set_state(STATE_CLOSED);
         } break;

         case STATE_CLOSED: {
            set_open_position(0.0f);
         } break;

         default:
            AllegroFlare::Logger::throw_error(
               "ClassName::set_state",
               "Unable to handle case for state \"" + std::to_string(state) + "\""
            );
         break;
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: update_state
    parameters:
      - name: time_step
        type: double
        default_argument: 0.0f
      - name: time_now
        type: double
        default_argument: 0.0f
    guards: [ initialized, is_valid_state(state) ]
    body: |
      float age = infer_current_state_age(time_now);

      switch (state)
      {
         case STATE_OPENING: {
            set_open_position(open_position + speed);
            if (open_position >= 1.0) set_state(STATE_OPEN);
         } break;

         case STATE_OPEN: {
         } break;

         case STATE_CLOSING: {
            set_open_position(open_position - speed);
            if (open_position <= 0.0) set_state(STATE_CLOSED);
         } break;

         case STATE_CLOSED: {
         } break;

         default:
            AllegroFlare::Logger::throw_error(
               "ClassName::update_state",
               "Unable to handle case for state \"" + std::to_string(state) + "\""
            );
         break;
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger
      - AllegroFlare::Vec2D


  - name: is_valid_state
    type: bool
    static: true
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
      std::set<uint32_t> valid_states =
      {
         STATE_OPENING,
         STATE_OPEN,
         STATE_CLOSING,
         STATE_CLOSED
      };
      return (valid_states.count(state) > 0);
    body_dependency_symbols:
      - std::set


  - name: is_state
    type: bool
    parameters:
      - name: possible_state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
     return (state == possible_state);


  - name: infer_current_state_age
    type: float
    parameters:
      - name: time_now
        type: float
        default_argument: al_get_time()
    guards: [ initialized ]
    body: |
      return (time_now - state_changed_at);


dependencies:


  - symbol: Krampus24::Gameplay::Entities::Base
    headers: [ Krampus24/Gameplay/Entities/Base.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Door
    headers: [ Krampus24/Gameplay/Entities/Door.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]
  - symbol: AllegroFlare::Vec3D
    headers: [ AllegroFlare/Vec3D.hpp ]
  - symbol: std::sin
    headers: [ cmath ]
  - symbol: std::abs
    headers: [ cmath ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::Random
    headers: [ AllegroFlare/Random.hpp ]
  - symbol: AllegroFlare::SampleBin
    headers: [ AllegroFlare/SampleBin.hpp ]
  - symbol: AllegroFlare::AudioRepositoryElement
    headers: [ AllegroFlare/AudioRepositoryElement.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]


