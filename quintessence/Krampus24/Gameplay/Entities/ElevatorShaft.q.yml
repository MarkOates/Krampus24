parent_classes:


  - class: Krampus24::Gameplay::Entities::Base
    scope: public
    init_with: ''


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr

  - name: collision_mesh
    type: AllegroFlare::Physics::CollisionMesh*
    init_with: nullptr

  - name: initial_position
    type: AllegroFlare::Vec3D
    init_with: AllegroFlare::Vec3D(0, 0, 0)

  - name: shaft_bottom_cap
    type: AllegroFlare::Model3D*
    init_with: nullptr

  - name: shaft_column
    type: AllegroFlare::Model3D*
    init_with: nullptr

  - name: car
    type: AllegroFlare::Model3D*
    init_with: nullptr

  - name: car_body_dynamic_collision_mesh_face_names
    type: std::vector<std::string>
    init_with: '{}'

  - name: car_door_dynamic_collision_mesh_face_names
    type: std::vector<std::string>
    init_with: '{}'

  - name: elevation_position
    type: float
    init_with: 0.0f
    setter: explicit

    # TODO: Improve this name
  - name: num_tiers
    type: float
    init_with: 4.0f
    setter: explicit

  - name: speed
    type: float
    init_with: (0.00165f * 3)

  - name: locked
    type: bool
    init_with: false

  - name: state
    type: uint32_t
    init_with: STATE_UNDEF
    getter: true
    setter: explicit

  - name: state_is_busy
    type: bool
    init_with: false

  - name: state_changed_at
    type: float
    init_with: 0.0f

  - name: style
    type: Krampus24::Gameplay::Entities::ElevatorShaft::Style
    init_with: Krampus24::Gameplay::Entities::ElevatorShaft::STYLE_NORMAL
    getter: true
    setter: explicit

  - name: uv_offset_x
    type: float
    init_with: 0.0f
    getter: true
    setter: explicit

  - name: uv_offset_y
    type: float
    init_with: 0.0f
    getter: true
    setter: explicit

  - name: initialized
    type: bool
    init_with: false

  - name: BLENDER_IDENTIFIER
    type: char*
    init_with: '(char*)"elevator_shaft"'
    static: true
    constexpr: true

  - name: DOOR_OPEN_SAMPLE_IDENTIFIER
    type: char*
    init_with: '(char*)"door-01-opening.ogg"'
    static: true
    constexpr: true


enums:


  - name: State
    enumerators:
      - STATE_UNDEF
      - STATE_GOING_UP
      - STATE_AT_TOP
      - STATE_GOING_DOWN
      - STATE_AT_BOTTOM


  - name: Style
    scope: public
    enumerators:
      - STYLE_UNDEF
      - STYLE_NORMAL
      - STYLE_NORMAL_DISRUPTED
      - STYLE_BARN
      - STYLE_FIRE  # NOTE: This one is not really practical, just for debugging
      - STYLE_USER_CUSTOM_DEFINED_UV


methods:


  - name: transform_model
    static: true
    type: void
    parameters:
      - name: model
        type: AllegroFlare::Model3D*
        default_argument: nullptr
      - name: transform
        type: ALLEGRO_TRANSFORM*
        default_argument: nullptr
    body: |
      //validate_initialized_or_output_to_cerr("transform");
      //validate_not_vertex_buffer("transform");
      ALLEGRO_TRANSFORM normal_transform;
      al_copy_transform(&normal_transform, transform);
      normal_transform.m[3][0] = 0.0f;
      normal_transform.m[3][1] = 0.0f;
      normal_transform.m[3][2] = 0.0f;

      // TODO: Test this
      auto &vertices = model->vertices;
      for (unsigned i=0; i<vertices.size(); i++)
      {
         al_transform_coordinates_3d(
            transform,
            &vertices[i].x,
            &vertices[i].y,
            &vertices[i].z
         );

         // Also transform the normal:
         al_transform_coordinates_3d(
            &normal_transform,
            &vertices[i].nx,
            &vertices[i].ny,
            &vertices[i].nz
        );

         AllegroFlare::Vec3D to_be_normalized =
            AllegroFlare::Vec3D(vertices[i].nx, vertices[i].ny, vertices[i].nz).normalized();

         vertices[i].nx = to_be_normalized.x;
         vertices[i].ny = to_be_normalized.y;
         vertices[i].nz = to_be_normalized.z;
      }
      return;


  - name: construct
    static: true
    type: std::vector<Krampus24::Gameplay::Entities::Base*>
    parameters:
      - name: model_bin
        type: AllegroFlare::ModelBin*
        default_argument: nullptr
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
      - name: collision_mesh
        type: AllegroFlare::Physics::CollisionMesh*
        default_argument: nullptr
      - name: name_for_collision_faces
        type: std::string
        default_argument: '"[unset-name_for_collision_faces]"'
      - name: initial_position
        type: AllegroFlare::Vec3D
        default_argument: AllegroFlare::Vec3D(0, 0, 0)
      - name: rotation
        type: float
        default_argument: 0.0f
    guards: [ model_bin, bitmap_bin, event_emitter, collision_mesh ]
    body: |

      // Main entity
      Krampus24::Gameplay::Entities::ElevatorShaft* result = new Krampus24::Gameplay::Entities::ElevatorShaft;
      //result->model = model_bin->auto_get("door-01.obj");
      //result->texture = bitmap_bin->auto_get("entities_texture-01.png");
      result->affected_by_environmental_forces = false;
      result->collides_with_player = true; // DEVELOPMENT
      result->placement.position = initial_position;
      //result->placement.position.y += 0.001f; // Move slightly up 
      result->placement.align = { 0.0, 0.0, 0.0 }; // Not sure how this will make sense
      result->placement.size = { 4.0, 4.0, 4.0 };
      result->set_num_tiers(4.0); // Needed to set the placement size
      result->aabb3d.set_max(result->placement.size);
      result->aabb3d_alignment = { 0.5, 0.005, 0.5 }; // Just slightly below the floor
      result->initial_position = initial_position;
      result->placement.rotation.y = rotation;
      result->texture = bitmap_bin->auto_get("entities_texture-01.png");
      result->elevator_shaft__is_elevator_shaft = true;


      // Shaft
      result->shaft_bottom_cap = model_bin->auto_get("elevator_shaft-03-shaft_bottom_cap.obj");
      result->shaft_column = model_bin->auto_get("elevator_shaft-03-shaft_column.obj");
      result->car = model_bin->auto_get("elevator_shaft-03-car.obj");


      result->player_can_inspect_or_use = true;


      //type: std::pair<std::vector<std::string>, std::vector<AllegroFlare::Physics::CollisionMeshFace*>>
      // Load the collision mesh
      //std::vector<std::string> dynamic_face_names; // This is simply discarded
      //std::vector<AllegroFlare::Physics::CollisionMeshFace*> dynamic_faces;


      // Car collision mesh
      result->collision_mesh = collision_mesh;


      {
         std::string collision_mesh_name = "elevator_shaft-03-collision_mesh-car.obj";
         AllegroFlare::Model3D *mesh = model_bin->auto_get(collision_mesh_name);
         //mesh->displace(result->placement.position);
         ALLEGRO_TRANSFORM placement_transform;
         result->placement.build_transform(&placement_transform);
         transform_model(mesh, &placement_transform);
         result->car_body_dynamic_collision_mesh_face_names =
            collision_mesh->load_dynamic_faces(
               name_for_collision_faces, //"mydoor",
               mesh
            );
         model_bin->destroy(collision_mesh_name);
      }



      //result->collision_mesh = collision_mesh;

      {
         std::string collision_mesh_name = "elevator_shaft-03-collision_mesh-car_door.obj";
         AllegroFlare::Model3D *mesh = model_bin->auto_get(collision_mesh_name);
         //mesh->displace(result->placement.position);
         ALLEGRO_TRANSFORM placement_transform;
         result->placement.build_transform(&placement_transform);
         transform_model(mesh, &placement_transform);
         result->car_door_dynamic_collision_mesh_face_names =
            collision_mesh->load_dynamic_faces(
               name_for_collision_faces + std::string("-door-"), //"mydoor",
               mesh
            );
         model_bin->destroy(collision_mesh_name);
      }



      // Preload the samples
      //result->sample_bin = sample_bin;
      //sample_bin->preload(DOOR_OPEN_SAMPLE_IDENTIFIER);
      result->event_emitter = event_emitter;


      result->initialized = true;
      result->set_state(STATE_AT_BOTTOM);


      result->player_can_inspect_or_use__custom_look_at_logic = [](
            Krampus24::Gameplay::Entities::Base* self,
            AllegroFlare::Vec3D *player_position,
            AllegroFlare::Vec3D *player_view_direction
      ) -> bool {
         // TODO: Figure out this logic
         AllegroFlare::Vec2D self_flat_position(
            self->placement.position.x,
            self->placement.position.z
         );
         AllegroFlare::Vec2D player_flat_position(
            player_position->x,
            player_position->z
         );

         float player_distance_from_center =
            AllegroFlare::manhattan_distance(&self_flat_position, &player_flat_position);
         if (player_distance_from_center < 1.5) return true;

         return false;
      };

      result->player_can_inspect_or_use__hint_text = "Activate elevator";


      return { result }; //, result->right_door };
    body_dependency_symbols:
      - AllegroFlare::distance


  - name: set_num_tiers
    parameters:
      - name: num_tiers
        type: float
        default_argument: 4.0f
    guards: [ (num_tiers >= 2), (num_tiers <= 6) ]
    body: |
      this->num_tiers = num_tiers;
      placement.size.y = 4.0f*num_tiers;
      aabb3d.set_max(placement.size);
      return;


  - name: attempt_to_move_elevator_up
    type: bool
    body: |
      if (locked) return false;
      if (!is_state(STATE_AT_BOTTOM)) return false;
      set_state(STATE_GOING_UP);
      return true;


  - name: attempt_to_move_elevator_down
    type: bool
    body: |
      if (locked) return false;
      if (!is_state(STATE_AT_TOP)) return false;
      set_state(STATE_GOING_DOWN);
      return true;


  - name: on_player_inspect_or_use
    type: bool
    virtual: true
    override: true
    body: |
      if (is_state(STATE_AT_TOP))
      {
         attempt_to_move_elevator_down();
         //return true;
      }
      else if (is_state(STATE_AT_BOTTOM))
      {
         attempt_to_move_elevator_up();
         //attempt_to_open();
         //return true;
      }
      return false;


  - name: ~destroy
    body: |
      //if (initialized)
      //{
         //AllegroFlare::Logger::info_from(
            //"Krampus24::Gameplay::Entities::Door",
            //"This class will need to destroy its local copies of 
         //);
      //}
      return;


  - name: lock
    body: |
      locked = true;
      return;


  - name: unlock
    body: |
      locked = false;
      return;


  - name: snap_to_top
    body: |
      set_state(STATE_AT_TOP);
      return;


  - name: snap_to_bottom
    body: |
      set_state(STATE_AT_BOTTOM);
      return;


  - name: set_style
    parameters:
      - name: style
        type: Krampus24::Gameplay::Entities::ElevatorShaft::Style
        default_argument: STYLE_UNDEF
    body: |
      this->style = style;
      std::tie(uv_offset_x, uv_offset_y) = get_uv_offset_from_style(style);
      return;


  - name: set_uv_offset_x
    parameters:
      - name: uv_offset_x
        type: float
        default_argument: 0.0f
    body: |
      this->style = STYLE_USER_CUSTOM_DEFINED_UV;
      this->uv_offset_x = uv_offset_x;
      return;


  - name: set_uv_offset_y
    parameters:
      - name: uv_offset_y
        type: float
        default_argument: 0.0f
    body: |
      this->style = STYLE_USER_CUSTOM_DEFINED_UV;
      this->uv_offset_y = uv_offset_y;
      return;


  - name: get_uv_offset_from_style
    static: true
    type: std::pair<float, float>
    parameters:
      - name: style
        type: Krampus24::Gameplay::Entities::ElevatorShaft::Style
        default_argument: STYLE_UNDEF
    guards: [ (style != STYLE_UNDEF) ]
    body: |
      switch (style)
      {
         case STYLE_NORMAL: return { 0, 0 }; break;

         case STYLE_NORMAL_DISRUPTED: return { 0.05, 0.0 }; break;

         case STYLE_BARN: return { 0.2, 0.2 }; break;

         case STYLE_FIRE: return { 0.25, 0.20 }; break; // NOTE: This one is not really practical, just for debugging

         default:
            AllegroFlare::Logger::throw_error(
               "ClassName::get_uv_offset_from_style",
               "Unable to handle case for style \"" + std::to_string(style) + "\""
            );
         break;
      }
      
      AllegroFlare::Logger::throw_error(
         "ClassName::get_uv_offset_from_style",
         "Unexpected code path to here (code: 678sdf678sdf678sdf)"
      );
      return { 0, 0 };


  - name: activate_collision_mesh
    guards: [ collision_mesh ]
    body: |
      for (auto &face_name : car_door_dynamic_collision_mesh_face_names)
      {
         collision_mesh->activate_dynamic_face(face_name);
      }
      return;


  - name: deactivate_collision_mesh
    guards: [ collision_mesh ]
    body: |
      for (auto &face_name : car_door_dynamic_collision_mesh_face_names)
      {
         collision_mesh->deactivate_dynamic_face(face_name);
      }
      return;


  - name: draw
    virtual: true
    override: true
    body: |
      ALLEGRO_TRANSFORM initial_transform;

      shaft_bottom_cap->set_texture(texture);
      shaft_column->set_texture(texture);

      al_copy_transform(&initial_transform, al_get_current_transform());

      //placement.start_transform();
      ALLEGRO_TRANSFORM base_transform;
      placement.build_transform(&base_transform);

      AllegroFlare::Shaders::Base::set_float("uv_offset_x", uv_offset_x);
      AllegroFlare::Shaders::Base::set_float("uv_offset_y", uv_offset_y);


      al_use_transform(&base_transform);
      //shaft_bottom_cap->set_texture(texture);
      shaft_bottom_cap->draw();
      //shaft_column->set_texture(texture);


      // TODO: Assemble this into a single mesh
      ///*
      const float shaft_column_height = 4;
      ALLEGRO_TRANSFORM composite_shaft_column_transform;
      ALLEGRO_TRANSFORM shaft_column_transform;
      al_identity_transform(&shaft_column_transform);
      int num_reps = (int)num_tiers;
      //shaft_column->set_texture(texture);

      // Draw the columns
      shaft_column->draw();
      for (int i=0; i<(num_reps-1); i++)
      {
         al_translate_transform_3d(&shaft_column_transform, 0, shaft_column_height, 0);
         al_copy_transform(&composite_shaft_column_transform, &shaft_column_transform);
         al_compose_transform(&composite_shaft_column_transform, &base_transform);

         al_use_transform(&composite_shaft_column_transform);

         //al_use_transform(&base_transform);
         shaft_column->draw();
         //al_translate_transform_3d(&shaft_column_transform, 0, shaft_column_height, 0);
      }
      //*/


      ALLEGRO_TRANSFORM car_transform;
      al_identity_transform(&car_transform);
      al_translate_transform_3d(&car_transform, 0, calculate_local_elevator_car_y_position(), 0);
      al_compose_transform(&car_transform, &base_transform);
      al_use_transform(&car_transform);

      car->set_texture(texture);
      car->draw();


      AllegroFlare::Shaders::Base::set_float("uv_offset_x", 0.0);
      AllegroFlare::Shaders::Base::set_float("uv_offset_y", 0.0);

      al_use_transform(&initial_transform);

      //placement.restore_transform();
      return;
    body_dependency_symbols:
      - AllegroFlare::Shaders::Base


  - name: calculate_local_elevator_car_y_position
    type: float
    body: |
      return elevation_position * 4 * (num_tiers-1);


  - name: calculate_global_elevator_car_y_position
    type: float
    body: |
      return placement.position.y + elevation_position * 4.0f * (num_tiers-1);


  - name: set_elevation_position
    parameters:
      - name: elevation_position
        type: float
        default_argument: 1.0f
    body: |
      elevation_position = std::max(std::min(1.0f, elevation_position), 0.0f);
      this->elevation_position = elevation_position;

      //elevation_position 
      //left_door->placement.position.y = open_position * 2.9;

      //left_door->placement.position.y = open_position * 2.9;
      //right_door->placement.position.y = -open_position * 2.9;
      return;


  - name: on_enter_player_bbox_collision
    virtual: true
    override: true
    parameters:
      - name: player_entity
        type: Krampus24::Gameplay::Entities::Base*
        default_argument: nullptr
    body: |
      //if (!locked) set_state(STATE_GOING_UP);
      //else event_emitter->emit_activate_dialog_node_by_name_event("locked_door");
      return;


  - name: on_exit_player_bbox_collision
    virtual: true
    override: true
    parameters:
      - name: player_entity
        type: Krampus24::Gameplay::Entities::Base*
        default_argument: nullptr
    body: |
      //if (!locked) set_state(STATE_GOING_DOWN);
      //else event_emitter->emit_activate_dialog_node_by_name_event("locked_door");
      return;


  - name: on_time_step
    virtual: true
    override: true
    guards: [ initialized ]
    parameters:
      - name: time_step
        type: double
        default_argument: 0.0f
      - name: time_now
        type: double
        default_argument: 0.0f
    body: |
      update_state(time_step, time_now);
      return;
    body_dependency_symbols:
      - std::sin


  - name: play_open_door_sound_effect
    body: |
      //sample_bin->operator[](DOOR_OPEN_SAMPLE_IDENTIFIER)->play();
      //event_emitter->emit_play_sound_effect_event("open_metal_door");
      return;


  - name: build_audio_controller_sound_effect_list
    static: true
    type: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    body: |
      std::map<std::string, AllegroFlare::AudioRepositoryElement> sound_effect_elements = {
         { "open_metal_door", { "door-01-opening.ogg", false, "restart" } },
      };
      return sound_effect_elements;


  - name: set_state
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
      - name: override_if_busy
        type: bool
        default_argument: false
    guards: [ initialized, is_valid_state(state) ]
    body: |
      if (this->state == state) return;
      if (!override_if_busy && state_is_busy) return;
      uint32_t previous_state = this->state;

      this->state = state;
      state_changed_at = al_get_time();

      switch (state)
      {
         case STATE_GOING_UP: {
            activate_collision_mesh();
            //play_open_door_sound_effect();
            //sample_bin->operator[](DOOR_OPEN_SAMPLE_IDENTIFIER)->play();
            //set_state(STATE_OPEN);
         } break;

         case STATE_AT_TOP: {
            set_elevation_position(1.0f);
            deactivate_collision_mesh();
            //sample_bin->operator[](DOOR_OPEN_SAMPLE_IDENTIFIER)->play();
         } break;

         case STATE_GOING_DOWN: {
            activate_collision_mesh();
            //play_open_door_sound_effect();
            //sample_bin->operator[](DOOR_OPEN_SAMPLE_IDENTIFIER)->play();
            //set_state(STATE_AT_BOTTOM):
         } break;

         case STATE_AT_BOTTOM: {
            set_elevation_position(0.0f);
            deactivate_collision_mesh();
         } break;

         default:
            AllegroFlare::Logger::throw_error(
               "ClassName::set_state",
               "Unable to handle case for state \"" + std::to_string(state) + "\""
            );
         break;
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: update_state
    parameters:
      - name: time_step
        type: double
        default_argument: 0.0f
      - name: time_now
        type: double
        default_argument: 0.0f
    guards: [ initialized, is_valid_state(state) ]
    body: |
      float age = infer_current_state_age(time_now);

      //float flip_speed = 4.0f;
      //float flipper = fmod(al_get_time(), flip_speed);
      //if (flipper < flip_speed/2) activate_collision_mesh();
      //else deactivate_collision_mesh();


      switch (state)
      {
         case STATE_GOING_UP: {
            set_elevation_position(elevation_position + speed);
            if (elevation_position >= 1.0) set_state(STATE_AT_TOP);
         } break;

         case STATE_AT_TOP: {
         } break;

         case STATE_GOING_DOWN: {
            set_elevation_position(elevation_position - speed);
            if (elevation_position <= 0.0) set_state(STATE_AT_BOTTOM);
         } break;

         case STATE_AT_BOTTOM: {
         } break;

         default:
            AllegroFlare::Logger::throw_error(
               "ClassName::update_state",
               "Unable to handle case for state \"" + std::to_string(state) + "\""
            );
         break;
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger
      - AllegroFlare::Vec2D


  - name: is_valid_state
    type: bool
    static: true
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
      std::set<uint32_t> valid_states =
      {
         STATE_GOING_UP,
         STATE_AT_TOP,
         STATE_GOING_DOWN,
         STATE_AT_BOTTOM
      };
      return (valid_states.count(state) > 0);
    body_dependency_symbols:
      - std::set


  - name: is_state
    type: bool
    parameters:
      - name: possible_state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
     return (state == possible_state);


  - name: infer_current_state_age
    type: float
    parameters:
      - name: time_now
        type: float
        default_argument: al_get_time()
    guards: [ initialized ]
    body: |
      return (time_now - state_changed_at);


dependencies:


  - symbol: Krampus24::Gameplay::Entities::Base
    headers: [ Krampus24/Gameplay/Entities/Base.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]
  - symbol: AllegroFlare::Vec3D
    headers: [ AllegroFlare/Vec3D.hpp ]
  - symbol: std::sin
    headers: [ cmath ]
  - symbol: std::abs
    headers: [ cmath ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::Random
    headers: [ AllegroFlare/Random.hpp ]
  - symbol: AllegroFlare::SampleBin
    headers: [ AllegroFlare/SampleBin.hpp ]
  - symbol: AllegroFlare::AudioRepositoryElement
    headers: [ AllegroFlare/AudioRepositoryElement.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Shaders::Base
    headers: [ AllegroFlare/Shaders/Base.hpp ]
  - symbol: AllegroFlare::Physics::CollisionMesh
    headers: [ AllegroFlare/Physics/CollisionMesh.hpp ]
  - symbol: AllegroFlare::Physics::CollisionMeshFace
    headers: [ AllegroFlare/Physics/CollisionMeshFace.hpp ]
  - symbol: ALLEGRO_TRANSFORM
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Model3D
    headers: [ AllegroFlare/Model3D.hpp ]
  - symbol: Krampus24::Gameplay::Entities::ElevatorShaft::Style
    headers: [ Krampus24/Gameplay/Entities/ElevatorShaft.hpp ]
  - symbol: AllegroFlare::distance
    headers: [ AllegroFlare/Useful.hpp ]


