parent_classes:


  - class: Krampus24::Gameplay::Entities::Base
    scope: public
    init_with: ''


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr

  - name: initialized
    type: bool
    init_with: false
    getter: true

  - name: power_bar_level
    type: int
    init_with: 2

  - name: full_power_charge_duration
    type: float
    init_with: 2.25f

  - name: body
    type: AllegroFlare::Model3D*
    init_with: nullptr

  - name: power_bar_1
    type: AllegroFlare::Model3D*
    init_with: nullptr

  - name: power_bar_2
    type: AllegroFlare::Model3D*
    init_with: nullptr

  - name: power_bar_3
    type: AllegroFlare::Model3D*
    init_with: nullptr

  - name: power_bar_4
    type: AllegroFlare::Model3D*
    init_with: nullptr

  - name: state
    type: uint32_t
    init_with: STATE_UNDEF
    getter: true
    setter: explicit

  - name: state_is_busy
    type: bool
    init_with: false

  - name: state_changed_at
    type: float
    init_with: 0.0f

  - name: BLENDER_IDENTIFIER
    type: char*
    init_with: '(char*)"turret"'
    static: true
    constexpr: true


enums:


  - name: State
    enumerators:
      - STATE_UNDEF
      - STATE_IDLE
      - STATE_POWERING_UP
      - STATE_BROKEN


methods:


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      initialized = true;
      return;


  - name: construct
    static: true
    type: Krampus24::Gameplay::Entities::Turret*
    parameters:
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
      - name: model_bin
        type: AllegroFlare::ModelBin*
        default_argument: nullptr
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
      - name: position
        type: AllegroFlare::Vec3D
        default_argument: '{}'
      - name: rotation
        type: float
        default_argument: 0.0f
    guards:
      - event_emitter
      - model_bin
      - bitmap_bin
    body: |

      // TODO: Sort out the alignment, size, of objects, their collision boxes, their repositioning and the relationship
      // to the bounding box, as well as the collision padding of the player entity
      //float width = 2;
      //float height = 2;
      //AllegroFlare::Vec3D box_start_position = position; // + AllegroFlare::Vec3D(1, 0, 0);
      //AllegroFlare::Vec3D box_end_position = position; // + AllegroFlare::Vec3D(5, 0, 0);

      // Make the manager
      auto manager = new Krampus24::Gameplay::Entities::Turret;
      manager->model = model_bin->auto_get("turret-11-legs.obj");
      //manager->texture = bitmap_bin->auto_get("turret-11-body.png");
      manager->texture = bitmap_bin->auto_get("entities_texture-01.png");
      manager->placement.position = position;
      manager->placement.rotation.y = rotation;
      manager->placement.size = { 6.0, 3.0, 6.0 };
      manager->placement.align = { 0.0, 0.0, 0.0 };
      manager->placement.scale = { 1.0, 1.0, 1.0 };

      // Make inspectable
      manager->collides_with_player = true;
      manager->player_can_inspect_or_use = true;
      manager->aabb3d.set_max(manager->placement.size); //{ 5.0, 1.5, 5.0 });
      manager->aabb3d_alignment = { 0.5, 0.0, 0.5 };


      manager->body = model_bin->auto_get("turret-11-body.obj");
      manager->power_bar_1 = model_bin->auto_get("turret-11-power_bar_1.obj");
      manager->power_bar_2 = model_bin->auto_get("turret-11-power_bar_2.obj");
      manager->power_bar_3 = model_bin->auto_get("turret-11-power_bar_3.obj");
      manager->power_bar_4 = model_bin->auto_get("turret-11-power_bar_4.obj");
      

      manager->initialize();

      manager->set_state(STATE_IDLE);

      manager->event_emitter = event_emitter;

      // DEVELOPMENT: For now, just going to make an interactable zone to trigger the action on this entity
      //manager->set_hit_box_2d(AllegroFlare::Physics::AABB2D(0, 0, 20, 20));
      //manager->set(AllegroFlare::Prototypes::TileFPS::EntityFlags::PLAYER_CAN_INSPECT_OR_USE);
      //manager->set(AllegroFlare::Prototypes::TileFPS::EntityFlags::COLLIDES_WITH_PLAYER);

      return manager;


  - name: play_turret_startup_sound_effect
    body: |
      //sample_bin->operator[](DOOR_OPEN_SAMPLE_IDENTIFIER)->play();
      event_emitter->emit_play_sound_effect_event("turret_bootup_sound");
      return;


  - name: build_audio_controller_sound_effect_list
    static: true
    type: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    body: |
      std::map<std::string, AllegroFlare::AudioRepositoryElement> sound_effect_elements = {
         { "turret_bootup_sound", { "turret_bootup_sound-03.ogg", false, "restart" } },
      };
      return sound_effect_elements;


  - name: draw
    virtual: true
    override: true
    body: |
      placement.start_transform();

      ALLEGRO_COLOR color = al_color_name("dodgerblue");
      AllegroFlare::Shaders::Base::set_vec3("color_lift", color.r, color.g, color.b);
      AllegroFlare::Shaders::Base::set_float("color_lift_intensity", 0.08);
      AllegroFlare::Shaders::Base::set_int("color_lift_blend_mode", 2);


      //AllegroFlare::Shaders::Base::set_float("color_lift", al_color_name("lightpink"));
      //AllegroFlare::Shaders::Base::set_float("color_lift_intensity", 0.0);

      //AllegroFlare::Shaders::Base::set_float("uv_offset_x", uv_offset_x);
      //AllegroFlare::Shaders::Base::set_float("uv_offset_y", uv_offset_y);



      bool bar_1_on = power_bar_level >= 1;
      bool bar_2_on = power_bar_level >= 2;
      bool bar_3_on = power_bar_level >= 3;
      bool bar_4_on = power_bar_level >= 4;



      float base_bar_uv_offset_x = 0.3-0.1;
      float base_bar_uv_offset_y = 0.05;
      float on_offset = 0.2f;
     

      //float bar_1_uv_offset_x = 0.2f + base_bar_uv_offset_x;
      float bar_1_uv_offset_x = (bar_1_on ? on_offset : 0.0f) + base_bar_uv_offset_x;
      float bar_1_uv_offset_y = 0.0 + base_bar_uv_offset_y;

      float bar_2_uv_offset_x = (bar_2_on ? on_offset : 0.0f) + base_bar_uv_offset_x;
      float bar_2_uv_offset_y = 0.0 + base_bar_uv_offset_y;

      float bar_3_uv_offset_x = (bar_3_on ? on_offset : 0.0f) + base_bar_uv_offset_x;
      float bar_3_uv_offset_y = 0.0 + base_bar_uv_offset_y;

      float bar_4_uv_offset_x = (bar_4_on ? on_offset : 0.0f) + base_bar_uv_offset_x;
      float bar_4_uv_offset_y = 0.0 + base_bar_uv_offset_y;



      //door->placement.start_transform();
      model->set_texture(texture);
      model->draw();



      if (is_state(STATE_POWERING_UP))
      {
         ALLEGRO_TRANSFORM turret_body_transform;
         al_identity_transform(&turret_body_transform);
         al_translate_transform_3d(&turret_body_transform, 0, -1, 0);
         al_rotate_transform_3d(&turret_body_transform, 0, 1, 0, std::sin(infer_current_state_age() * 3.2) * 0.4);
         //al_rotate_transform_3d(&turret_body_transform, 1, 0, 0, std::sin(infer_current_state_age() * 3.2) * 0.4);
         //al_rotate_transform_3d(&turret_body_transform, 0, 1, 0, std::sin(al_get_time() * 3.2) * 0.4);
         al_translate_transform_3d(&turret_body_transform, 0, 1, 0);
         al_compose_transform(&turret_body_transform, al_get_current_transform());
         al_use_transform(&turret_body_transform);
      }
      else if (is_state(STATE_BROKEN))
      {
         float death_max_duration = 2.0;
         float death_duration = std::min(infer_current_state_age(), death_max_duration) / death_max_duration;
         ALLEGRO_TRANSFORM turret_body_transform;
         al_identity_transform(&turret_body_transform);
         al_translate_transform_3d(&turret_body_transform, 0, -1, 0);
         //al_rotate_transform_3d(&turret_body_transform, 0, 1, 0, std::sin(infer_current_state_age() * 3.2) * 0.4);
         al_rotate_transform_3d(&turret_body_transform, 1, 0, 0, death_duration * 0.68);
         //al_rotate_transform_3d(&turret_body_transform, 0, 1, 0, std::sin(al_get_time() * 3.2) * 0.4);
         al_translate_transform_3d(&turret_body_transform, 0, 1, 0);
         al_compose_transform(&turret_body_transform, al_get_current_transform());
         al_use_transform(&turret_body_transform);
      }
      


      body->set_texture(texture);
      body->draw();

      //AllegroFlare::Shaders::Base::set_float("color_lift", al_color_name("red"));
      //AllegroFlare::Shaders::Base::set_float("color_lift_intensity", 0.3);

      AllegroFlare::Shaders::Base::set_float("uv_offset_x", bar_1_uv_offset_x);
      AllegroFlare::Shaders::Base::set_float("uv_offset_y", bar_1_uv_offset_y);
      power_bar_1->set_texture(texture);
      power_bar_1->draw();

      AllegroFlare::Shaders::Base::set_float("uv_offset_x", bar_2_uv_offset_x);
      AllegroFlare::Shaders::Base::set_float("uv_offset_y", bar_2_uv_offset_y);
      power_bar_2->set_texture(texture);
      power_bar_2->draw();

      AllegroFlare::Shaders::Base::set_float("uv_offset_x", bar_3_uv_offset_x);
      AllegroFlare::Shaders::Base::set_float("uv_offset_y", bar_3_uv_offset_y);
      power_bar_3->set_texture(texture);
      power_bar_3->draw();

      AllegroFlare::Shaders::Base::set_float("uv_offset_x", bar_4_uv_offset_x);
      AllegroFlare::Shaders::Base::set_float("uv_offset_y", bar_4_uv_offset_y);
      power_bar_4->set_texture(texture);
      power_bar_4->draw();
      //door->placement.restore_transform();



      //AllegroFlare::Shaders::Base::set_float("uv_offset_x", 0.0);
      //AllegroFlare::Shaders::Base::set_float("uv_offset_y", 0.0);
      AllegroFlare::Shaders::Base::set_int("color_lift_blend_mode", 0);
      AllegroFlare::Shaders::Base::set_float("color_lift_intensity", 0.0);
      AllegroFlare::Shaders::Base::set_float("uv_offset_x", 0);
      AllegroFlare::Shaders::Base::set_float("uv_offset_y", 0);

      placement.restore_transform();
      return;
    body_dependency_symbols:
      - al_color_name
      - AllegroFlare::Shaders::Base
      - std::sin


  - name: on_player_inspect_or_use
    type: bool
    virtual: true
    override: true
    body: |
      // TODO: Consider some interaction here
      //throw std::runtime_error("asdfasfasdf");
      if (is_state(STATE_IDLE)) set_state(STATE_POWERING_UP);
      return true;


  - name: on_time_step
    virtual: true
    override: true
    guards: [ initialized ]
    parameters:
      - name: time_step
        type: double
        default_argument: 0.0f
      - name: time_now
        type: double
        default_argument: 0.0f
    body: |
      update_state(time_step, time_now);
      return;


  - name: set_state
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
      - name: override_if_busy
        type: bool
        default_argument: false
    guards: [ is_valid_state(state) ]
    body: |
      if (this->state == state) return;
      if (!override_if_busy && state_is_busy) return;
      uint32_t previous_state = this->state;
      //this->state = state;
      //state_changed_at = al_get_time();

      switch (state)
      {
         case STATE_IDLE: {
            power_bar_level = 0;
         } break;

         case STATE_POWERING_UP: {
            power_bar_level = 1; // DEVELOPMENT
            play_turret_startup_sound_effect();
         } break;

         case STATE_BROKEN: {
            power_bar_level = 0; // DEVELOPMENT
         } break;

         default: {
            AllegroFlare::Logger::throw_error(
               "ClassName::set_state",
               "Unable to handle case for state \"" + std::to_string(state) + "\""
            );
         } break;
      }

      this->state = state;
      state_changed_at = al_get_time();

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: update_state
    parameters:
      - name: time_step
        type: double
        default_argument: 0.0f
      - name: time_now
        type: double
        default_argument: 0.0f
    guards: [ initialized, is_valid_state(state) ]
    body: |
      float age = infer_current_state_age(time_now);

      switch (state)
      {
         case STATE_IDLE: {
         } break;

         case STATE_POWERING_UP: {
            //throw std::runtime_error("asdfasdf");
            int next_level = ((age / full_power_charge_duration) * 4) + 1;

            if (power_bar_level != next_level)
            {
               power_bar_level = next_level;
               // Play blip sound effct
            }

            if (age >= full_power_charge_duration)
            {
               power_bar_level = 5;
               set_state(STATE_BROKEN);
               // TODO: Play broke sound effect
            }

            //if (power_bar_level != next_level)
            //{
               //power_bar_level = next_level;
               // Play blip sound effct
            //}

         } break;

         case STATE_BROKEN: {
         } break;

         default: {
            AllegroFlare::Logger::throw_error(
               "ClassName::update_state",
               "Unable to handle case for state \"" + std::to_string(state) + "\""
            );
         } break;
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: is_valid_state
    type: bool
    static: true
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
      std::set<uint32_t> valid_states =
      {
         STATE_IDLE,
         STATE_POWERING_UP,
         STATE_BROKEN,
      };
      return (valid_states.count(state) > 0);
    body_dependency_symbols:
      - std::set


  - name: is_state
    type: bool
    parameters:
      - name: possible_state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
     return (state == possible_state);


  - name: infer_current_state_age
    type: float
    parameters:
      - name: time_now
        type: float
        default_argument: al_get_time()
    body: |
      return (time_now - state_changed_at);


dependencies:


  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Vec3D
    headers: [ AllegroFlare/Vec3D.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Base
    headers: [ Krampus24/Gameplay/Entities/Base.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Turret
    headers: [ Krampus24/Gameplay/Entities/Turret.hpp ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: AllegroFlare::Shaders::Base
    headers: [ AllegroFlare/Shaders/Base.hpp ]
  - symbol: AllegroFlare::Model3D
    headers: [ AllegroFlare/Model3D.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::AudioRepositoryElement
    headers: [ AllegroFlare/AudioRepositoryElement.hpp ]
  - symbol: std::sin
    headers: [ cmath ]


