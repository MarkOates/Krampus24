parent_classes:


  - class: Krampus24::Gameplay::Entities::Base
    scope: public
    init_with: ''


properties:


  - name: initialized
    type: bool
    init_with: false
    getter: true

  - name: BLENDER_IDENTIFIER
    type: char*
    init_with: '(char*)"turret"'
    static: true
    constexpr: true



methods:


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      initialized = true;
      return;


  - name: construct
    static: true
    type: Krampus24::Gameplay::Entities::Turret*
    parameters:
      - name: model_bin
        type: AllegroFlare::ModelBin*
        default_argument: nullptr
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
      - name: position
        type: AllegroFlare::Vec3D
        default_argument: '{}'
      - name: rotation
        type: float
        default_argument: 0.0f
    guards: [ model_bin, bitmap_bin ]
    body: |
      // TODO: Sort out the alignment, size, of objects, their collision boxes, their repositioning and the relationship
      // to the bounding box, as well as the collision padding of the player entity
      //float width = 2;
      //float height = 2;
      AllegroFlare::Vec3D box_start_position = position; // + AllegroFlare::Vec3D(1, 0, 0);
      AllegroFlare::Vec3D box_end_position = position; // + AllegroFlare::Vec3D(5, 0, 0);

      // Make the manager
      auto manager = new Krampus24::Gameplay::Entities::Turret;
      manager->model = model_bin->auto_get("turret-03.obj");
      manager->texture = bitmap_bin->auto_get("turret-03.png");
      manager->placement.position = position;
      manager->placement.rotation.y = rotation;

      //manager->get_placement_ref().scale = { 0.05, 0.05, 0.05 };
      manager->placement.scale = { 1.0, 1.0, 1.0 };
      //manager->get_placement_ref().position.y = 0.25;
      //manager->get_velocity_ref().rotation.y = 0.0075;
      //manager->event_emitter = event_emitter;
      //manager->left_door_entity = left_door;
      //manager->right_door_entity = right_door;
      //manager->box_start_position = box_start_position;
      //manager->box_end_position = box_end_position;
      //manager->set_collision_tile_map(collision_tile_map);
      manager->initialize();
      //manager->set_solid_on_collision_map();

      // DEVELOPMENT: For now, just going to make an interactable zone to trigger the action on this entity
      //manager->set_hit_box_2d(AllegroFlare::Physics::AABB2D(0, 0, 20, 20));
      //manager->set(AllegroFlare::Prototypes::TileFPS::EntityFlags::PLAYER_CAN_INSPECT_OR_USE);
      //manager->set(AllegroFlare::Prototypes::TileFPS::EntityFlags::COLLIDES_WITH_PLAYER);

      return manager;


dependencies:


  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Vec3D
    headers: [ AllegroFlare/Vec3D.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Base
    headers: [ Krampus24/Gameplay/Entities/Base.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Turret
    headers: [ Krampus24/Gameplay/Entities/Turret.hpp ]


