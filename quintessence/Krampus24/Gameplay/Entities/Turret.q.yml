parent_classes:


  - class: Krampus24::Gameplay::Entities::Base
    scope: public
    init_with: ''


properties:


  - name: initialized
    type: bool
    init_with: false
    getter: true

  - name: power_bar_level
    type: int
    init_with: 2

  - name: body
    type: AllegroFlare::Model3D*
    init_with: nullptr

  - name: power_bar_1
    type: AllegroFlare::Model3D*
    init_with: nullptr

  - name: power_bar_2
    type: AllegroFlare::Model3D*
    init_with: nullptr

  - name: power_bar_3
    type: AllegroFlare::Model3D*
    init_with: nullptr

  - name: power_bar_4
    type: AllegroFlare::Model3D*
    init_with: nullptr

  - name: BLENDER_IDENTIFIER
    type: char*
    init_with: '(char*)"turret"'
    static: true
    constexpr: true



methods:


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      initialized = true;
      return;


  - name: construct
    static: true
    type: Krampus24::Gameplay::Entities::Turret*
    parameters:
      - name: model_bin
        type: AllegroFlare::ModelBin*
        default_argument: nullptr
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
      - name: position
        type: AllegroFlare::Vec3D
        default_argument: '{}'
      - name: rotation
        type: float
        default_argument: 0.0f
    guards: [ model_bin, bitmap_bin ]
    body: |
      // TODO: Sort out the alignment, size, of objects, their collision boxes, their repositioning and the relationship
      // to the bounding box, as well as the collision padding of the player entity
      //float width = 2;
      //float height = 2;
      AllegroFlare::Vec3D box_start_position = position; // + AllegroFlare::Vec3D(1, 0, 0);
      AllegroFlare::Vec3D box_end_position = position; // + AllegroFlare::Vec3D(5, 0, 0);

      // Make the manager
      auto manager = new Krampus24::Gameplay::Entities::Turret;
      manager->model = model_bin->auto_get("turret-11-legs.obj");
      //manager->texture = bitmap_bin->auto_get("turret-11-body.png");
      manager->texture = bitmap_bin->auto_get("entities_texture-01.png");
      manager->placement.position = position;
      manager->placement.rotation.y = rotation;
      manager->placement.size = { 0.0, 0.0, 0.0 };
      manager->placement.align = { 0.5, 0.0, 0.5 };
      manager->placement.scale = { 1.0, 1.0, 1.0 };

      // Make inspectable
      //manager->player_can_inspect_or_use = true;
      manager->aabb3d.set_max({ 5.0, 1.5, 5.0 });
      manager->aabb3d_alignment = { 0.5, 0.0, 0.5 };


      manager->body = model_bin->auto_get("turret-11-body.obj");
      manager->power_bar_1 = model_bin->auto_get("turret-11-power_bar_1.obj");
      manager->power_bar_2 = model_bin->auto_get("turret-11-power_bar_2.obj");
      manager->power_bar_3 = model_bin->auto_get("turret-11-power_bar_3.obj");
      manager->power_bar_4 = model_bin->auto_get("turret-11-power_bar_4.obj");
      

      manager->initialize();

      // DEVELOPMENT: For now, just going to make an interactable zone to trigger the action on this entity
      //manager->set_hit_box_2d(AllegroFlare::Physics::AABB2D(0, 0, 20, 20));
      //manager->set(AllegroFlare::Prototypes::TileFPS::EntityFlags::PLAYER_CAN_INSPECT_OR_USE);
      //manager->set(AllegroFlare::Prototypes::TileFPS::EntityFlags::COLLIDES_WITH_PLAYER);

      return manager;


  - name: draw
    virtual: true
    override: true
    body: |
      placement.start_transform();

      ALLEGRO_COLOR color = al_color_name("dodgerblue");
      AllegroFlare::Shaders::Base::set_vec3("color_lift", color.r, color.g, color.b);
      AllegroFlare::Shaders::Base::set_float("color_lift_intensity", 0.08);
      AllegroFlare::Shaders::Base::set_int("color_lift_blend_mode", 2);


      //AllegroFlare::Shaders::Base::set_float("color_lift", al_color_name("lightpink"));
      //AllegroFlare::Shaders::Base::set_float("color_lift_intensity", 0.0);

      //AllegroFlare::Shaders::Base::set_float("uv_offset_x", uv_offset_x);
      //AllegroFlare::Shaders::Base::set_float("uv_offset_y", uv_offset_y);



      bool bar_1_on = power_bar_level >= 1;
      bool bar_2_on = power_bar_level >= 2;
      bool bar_3_on = power_bar_level >= 3;
      bool bar_4_on = power_bar_level >= 4;



      float base_bar_uv_offset_x = 0.3-0.1;
      float base_bar_uv_offset_y = 0.05;

      float bar_1_uv_offset_x = 0.2 + base_bar_uv_offset_x;
      float bar_1_uv_offset_y = 0.0 + base_bar_uv_offset_y;

      float bar_2_uv_offset_x = 0.0 + base_bar_uv_offset_x;
      float bar_2_uv_offset_y = 0.0 + base_bar_uv_offset_y;

      float bar_3_uv_offset_x = 0.0 + base_bar_uv_offset_x;
      float bar_3_uv_offset_y = 0.0 + base_bar_uv_offset_y;

      float bar_4_uv_offset_x = 0.0 + base_bar_uv_offset_x;
      float bar_4_uv_offset_y = 0.0 + base_bar_uv_offset_y;



      //door->placement.start_transform();
      model->set_texture(texture);
      model->draw();

      body->set_texture(texture);
      body->draw();

      //AllegroFlare::Shaders::Base::set_float("color_lift", al_color_name("red"));
      //AllegroFlare::Shaders::Base::set_float("color_lift_intensity", 0.3);

      AllegroFlare::Shaders::Base::set_float("uv_offset_x", bar_1_uv_offset_x);
      AllegroFlare::Shaders::Base::set_float("uv_offset_y", bar_1_uv_offset_y);
      power_bar_1->set_texture(texture);
      power_bar_1->draw();

      AllegroFlare::Shaders::Base::set_float("uv_offset_x", bar_2_uv_offset_x);
      AllegroFlare::Shaders::Base::set_float("uv_offset_y", bar_2_uv_offset_y);
      power_bar_2->set_texture(texture);
      power_bar_2->draw();

      AllegroFlare::Shaders::Base::set_float("uv_offset_x", bar_3_uv_offset_x);
      AllegroFlare::Shaders::Base::set_float("uv_offset_y", bar_3_uv_offset_y);
      power_bar_3->set_texture(texture);
      power_bar_3->draw();

      AllegroFlare::Shaders::Base::set_float("uv_offset_x", bar_4_uv_offset_x);
      AllegroFlare::Shaders::Base::set_float("uv_offset_y", bar_4_uv_offset_y);
      power_bar_4->set_texture(texture);
      power_bar_4->draw();
      //door->placement.restore_transform();



      //AllegroFlare::Shaders::Base::set_float("uv_offset_x", 0.0);
      //AllegroFlare::Shaders::Base::set_float("uv_offset_y", 0.0);
      AllegroFlare::Shaders::Base::set_int("color_lift_blend_mode", 0);
      AllegroFlare::Shaders::Base::set_float("color_lift_intensity", 0.0);
      AllegroFlare::Shaders::Base::set_float("uv_offset_x", 0);
      AllegroFlare::Shaders::Base::set_float("uv_offset_y", 0);

      placement.restore_transform();
      return;
    body_dependency_symbols:
      - al_color_name
      - AllegroFlare::Shaders::Base


  - name: on_player_inspect_or_use
    type: bool
    virtual: true
    override: true
    body: |
      // TODO: Consider some interaction here
      return true;


dependencies:


  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Vec3D
    headers: [ AllegroFlare/Vec3D.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Base
    headers: [ Krampus24/Gameplay/Entities/Base.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Turret
    headers: [ Krampus24/Gameplay/Entities/Turret.hpp ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: AllegroFlare::Shaders::Base
    headers: [ AllegroFlare/Shaders/Base.hpp ]
  - symbol: AllegroFlare::Model3D
    headers: [ AllegroFlare/Model3D.hpp ]


