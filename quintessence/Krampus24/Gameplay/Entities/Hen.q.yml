parent_classes:


  - class: Krampus24::Gameplay::Entities::Base
    scope: public
    init_with: ''


properties:


  - name: BLENDER_IDENTIFIER
    type: char*
    init_with: '(char*)"hen"'
    static: true
    constexpr: true


methods:


  - name: construct
    static: true
    type: Krampus24::Gameplay::Entities::Hen*
    parameters:
      - name: model_bin
        type: AllegroFlare::ModelBin*
        default_argument: nullptr
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    guards: [ model_bin, bitmap_bin ]
    body: |
      Krampus24::Gameplay::Entities::Hen* result = new Krampus24::Gameplay::Entities::Hen;
      result->model = model_bin->auto_get("hen-01.obj");
      result->texture = bitmap_bin->auto_get("entities_texture-01.png");


      result->affected_by_environmental_forces = true;


      //Krampus24::Gameplay::Entities::Base* result = new Krampus24::Gameplay::Entities::Base();

      float x = 0; //entity->location.x;
      float y = 0.5; //entity->location.z; // Swapping z<->y
      float z = 0; //entity->location.y; // Swapping z<->y

      AllegroFlare::Vec3D position = AllegroFlare::Vec3D(x, y, z);

      result->placement.position = position;
      result->placement.size = { 0.5, 0.5, 0.5 };
      result->collides_with_player = true;
      //result->affected_by_environmental_forces = affected_by_environmental_forces;

      //result->name = entity->name;
      //std::string entity_root_name = entity->get_name_unversioned();
      //if (entity_root_name == "elevator")
      //{
         // Do elevator stuff
         //result->placement.size = { 1.0, 2.0, 1.0 };
         //result->box_color = ALLEGRO_COLOR{ 1.0, 1.0, 0.4, 1.0 };
      //}


      return result;


dependencies:


  - symbol: Krampus24::Gameplay::Entities::Base
    headers: [ Krampus24/Gameplay/Entities/Base.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Hen
    headers: [ Krampus24/Gameplay/Entities/Hen.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]


