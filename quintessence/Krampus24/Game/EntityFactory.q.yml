properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    setter: before_initialized

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    setter: before_initialized

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    setter: before_initialized

  - name: collision_mesh
    type: AllegroFlare::Physics::CollisionMesh*
    init_with: nullptr
    setter: before_initialized

  - name: initialized
    type: bool
    init_with: false
    getter: true


methods:


  - name: initialize
    guards:
      - event_emitter
      - model_bin
      - bitmap_bin
      - collision_mesh
    guards: [ (!initialized) ]
    body: |
      initialized = true;
      return;


  - name: create_entity
    type: std::vector<Krampus24::Gameplay::Entities::Base*>
    parameters:
      - name: entity
        type: Krampus24::BlenderBlockingLoaderEntity*
        default_argument: nullptr
    guards: [ initialized, entity ]
    body: |

      float x = entity->location.x;
      float y = entity->location.z; // Swapping z<->y
      float z = entity->location.y; // Swapping z<->y

      AllegroFlare::Vec3D position = AllegroFlare::Vec3D(x, y, z);

      std::string entity_root_name = entity->get_name_unversioned();


      if (entity_root_name == Krampus24::Gameplay::Entities::Hen::BLENDER_IDENTIFIER)
      {
         //std::cout << "HEN made" << std::endl;
         auto *result = Krampus24::Gameplay::Entities::Hen::construct(model_bin, bitmap_bin, position, 6.0);
         result->name = entity->name;
         return { result };
      }
      else if (entity_root_name == Krampus24::Gameplay::Entities::Horse::BLENDER_IDENTIFIER)
      {
         //std::cout << "HEN made" << std::endl;
         auto *result = Krampus24::Gameplay::Entities::Horse::construct(model_bin, bitmap_bin, position, 6.0);
         result->name = entity->name;
         return { result };
      }
      else if (entity_root_name == Krampus24::Gameplay::Entities::Pig::BLENDER_IDENTIFIER)
      {
         //std::cout << "HEN made" << std::endl;
         auto *result = Krampus24::Gameplay::Entities::Pig::construct(model_bin, bitmap_bin, position, 6.0);
         result->name = entity->name;
         return { result };
      }
      else if (entity_root_name == Krampus24::Gameplay::Entities::Turret::BLENDER_IDENTIFIER)
      {
         float rotation = entity->rotation.z / 360.0;
         auto *result = Krampus24::Gameplay::Entities::Turret::construct(model_bin, bitmap_bin, position, rotation);
         result->name = entity->name;
         return { result };
      }
      // TODO: Move this to ZONES:
      //else if (entity_root_name == Krampus24::Gameplay::Entities::Zone::BLENDER_IDENTIFIER)
      //{
         ////float rotation = entity->rotation.z / 360.0;
         //AllegroFlare::Vec3D size = entity->size;
         //auto *result = Krampus24::Gameplay::Entities::Zone::construct(position, size);
         //result->name = entity->name;
         //return { result };
      //}
      else if (entity_root_name == Krampus24::Gameplay::Entities::Cryobed::BLENDER_IDENTIFIER)
      {
         float rotation = entity->rotation.z / 360.0;
         std::vector<Krampus24::Gameplay::Entities::Base*> results = Krampus24::Gameplay::Entities::Cryobed::construct(
            model_bin,
            bitmap_bin,
            event_emitter,
            collision_mesh,
            entity->name,
            position,
            rotation
         );
         results[0]->name = entity->name;
         results[0]->set_type("Cryobed");
         return results;
      }
      else if (entity_root_name == Krampus24::Gameplay::Entities::LibraryComputer::BLENDER_IDENTIFIER)
      {
         float rotation = entity->rotation.z / 360.0;
         std::vector<Krampus24::Gameplay::Entities::Base*> results = Krampus24::Gameplay::Entities::LibraryComputer::construct(
            model_bin,
            bitmap_bin,
            event_emitter,
            collision_mesh,
            entity->name,
            position,
            rotation
         );
         results[0]->name = entity->name;
         results[0]->set_type("LibraryComputer");
         return results;
      }
      else if (entity_root_name == Krampus24::Gameplay::Entities::Door::BLENDER_IDENTIFIER)
      {
         float rotation = entity->rotation.z / 360.0;
         std::vector<Krampus24::Gameplay::Entities::Base*> results = Krampus24::Gameplay::Entities::Door::construct(
            model_bin,
            bitmap_bin,
            event_emitter,
            collision_mesh,
            entity->name,
            position,
            rotation
         );
         results[0]->name = entity->name;
         results[0]->set_type("Door");
         return results;
      }
      else if (entity_root_name == Krampus24::Gameplay::Entities::MegaDoor::BLENDER_IDENTIFIER)
      {
         float rotation = entity->rotation.z / 360.0;
         std::vector<Krampus24::Gameplay::Entities::Base*> results = Krampus24::Gameplay::Entities::MegaDoor::construct(
            model_bin,
            bitmap_bin,
            event_emitter,
            collision_mesh,
            entity->name,
            position,
            rotation
         );
         results[0]->name = entity->name;
         return results;
      }
      else if (entity_root_name == Krampus24::Gameplay::Entities::ElevatorShaft::BLENDER_IDENTIFIER)
      {
         float rotation = entity->rotation.z / 360.0;
         std::vector<Krampus24::Gameplay::Entities::Base*> results =
            Krampus24::Gameplay::Entities::ElevatorShaft::construct(
               model_bin,
               bitmap_bin,
               event_emitter,
               collision_mesh,
               entity->name,
               position,
               rotation
            );
         results[0]->name = entity->name;
         return results;
      }
      else if (entity_root_name == Krampus24::Gameplay::Entities::SlidingDoor::BLENDER_IDENTIFIER)
      {
         float rotation = entity->rotation.z / 360.0;
         std::vector<Krampus24::Gameplay::Entities::Base*> results =
            Krampus24::Gameplay::Entities::SlidingDoor::construct(
               model_bin,
               bitmap_bin,
               event_emitter,
               collision_mesh,
               entity->name,
               position,
               rotation
            );
         results[0]->name = entity->name;
         return results;
      }
      else if (entity_root_name == Krampus24::Gameplay::Entities::Console::BLENDER_IDENTIFIER)
      {
         float rotation = entity->rotation.z / 360.0;
         std::vector<Krampus24::Gameplay::Entities::Base*> results =
            Krampus24::Gameplay::Entities::Console::construct(
               model_bin,
               bitmap_bin,
               event_emitter,
               collision_mesh,
               entity->name,
               position,
               rotation
            );
         results[0]->name = entity->name;
         return results;
      }
      else if (entity_root_name == Krampus24::Gameplay::Entities::PlayerShip::BLENDER_IDENTIFIER)
      {
         float rotation = entity->rotation.z / 360.0;
         std::vector<Krampus24::Gameplay::Entities::Base*> results =
            Krampus24::Gameplay::Entities::PlayerShip::construct(
               model_bin,
               bitmap_bin,
               event_emitter,
               collision_mesh,
               entity->name,
               position,
               rotation
            );
         results[0]->name = entity->name;
         return results;
      }
      else if (entity_root_name == Krampus24::Gameplay::Entities::PowerCoil::BLENDER_IDENTIFIER)
      {
         float rotation = entity->rotation.z / 360.0;
         std::vector<Krampus24::Gameplay::Entities::Base*> results =
            Krampus24::Gameplay::Entities::PowerCoil::construct(
               model_bin,
               bitmap_bin,
               event_emitter,
               collision_mesh,
               entity->name,
               position,
               rotation
            );
         results[0]->name = entity->name;
         return results;
      }
      else if (entity_root_name == Krampus24::Gameplay::Entities::Tablet::BLENDER_IDENTIFIER)
      {
         float rotation = entity->rotation.z / 360.0;
         std::vector<Krampus24::Gameplay::Entities::Base*> results =
            Krampus24::Gameplay::Entities::Tablet::construct(
               model_bin,
               bitmap_bin,
               event_emitter,
               //collision_mesh,
               //entity->name,
               position,
               rotation
            );
         results[0]->name = entity->name;
         return results;
      }
      else if (entity_root_name == Krampus24::Gameplay::Entities::Trinket::BLENDER_IDENTIFIER)
      {
         float rotation = entity->rotation.z / 360.0;
         Krampus24::Gameplay::Entities::Base* result =
            Krampus24::Gameplay::Entities::Trinket::construct(
               model_bin,
               bitmap_bin,
               event_emitter,
               //collision_mesh,
               //entity->name,
               position,
               rotation
            );
         result->name = entity->name;
         return { result };
      }

      //AllegroFlare::Vec3D position;
      bool affected_by_environmental_forces = true;


      Krampus24::Gameplay::Entities::Base* result = new Krampus24::Gameplay::Entities::Base();

      //float x = entity->location.x;
      //float y = entity->location.z; // Swapping z<->y
      //float z = entity->location.y; // Swapping z<->y

      //AllegroFlare::Vec3D position = AllegroFlare::Vec3D(x, y, z);

      result->placement.position = position;
      result->placement.size = { 0.5, 0.5, 0.5 };
      result->aabb3d.set_max(result->placement.size);
      result->collides_with_player = true;
      result->affected_by_environmental_forces = affected_by_environmental_forces;

      result->name = entity->name;
      //std::string entity_root_name = entity->get_name_unversioned();
      if (entity_root_name == "elevator")
      {
         // Do elevator stuff
         result->placement.size = { 4.0, 4.0, 4.0 };
         result->aabb3d.set_max(result->placement.size);
         result->aabb3d_alignment = { 0.5, 0.005, 0.5 };
         result->box_color = ALLEGRO_COLOR{ 1.0, 1.0, 0.4, 1.0 };
      }

      return { result };
    body_dependency_symbols:
      - Krampus24::Gameplay::Entities::Trinket
      - Krampus24::Gameplay::Entities::Horse
      - Krampus24::Gameplay::Entities::Pig
      - Krampus24::Gameplay::Entities::Hen
      - Krampus24::Gameplay::Entities::Turret
      - Krampus24::Gameplay::Entities::Zone
      - Krampus24::Gameplay::Entities::Cryobed
      - Krampus24::Gameplay::Entities::LibraryComputer
      - Krampus24::Gameplay::Entities::Door
      - Krampus24::Gameplay::Entities::MegaDoor
      - Krampus24::Gameplay::Entities::SlidingDoor
      - Krampus24::Gameplay::Entities::ElevatorShaft
      - Krampus24::Gameplay::Entities::Console
      - Krampus24::Gameplay::Entities::PlayerShip
      - Krampus24::Gameplay::Entities::PowerCoil
      - Krampus24::Gameplay::Entities::Tablet


dependencies:


  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: AllegroFlare::Physics::CollisionMesh
    headers: [ AllegroFlare/Physics/CollisionMesh.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Trinket
    headers: [ Krampus24/Gameplay/Entities/Trinket.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Horse
    headers: [ Krampus24/Gameplay/Entities/Horse.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Pig
    headers: [ Krampus24/Gameplay/Entities/Pig.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Hen
    headers: [ Krampus24/Gameplay/Entities/Hen.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Turret
    headers: [ Krampus24/Gameplay/Entities/Turret.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Zone
    headers: [ Krampus24/Gameplay/Entities/Zone.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Cryobed
    headers: [ Krampus24/Gameplay/Entities/Cryobed.hpp ]
  - symbol: Krampus24::Gameplay::Entities::LibraryComputer
    headers: [ Krampus24/Gameplay/Entities/LibraryComputer.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Door
    headers: [ Krampus24/Gameplay/Entities/Door.hpp ]
  - symbol: Krampus24::Gameplay::Entities::MegaDoor
    headers: [ Krampus24/Gameplay/Entities/MegaDoor.hpp ]
  - symbol: Krampus24::Gameplay::Entities::SlidingDoor
    headers: [ Krampus24/Gameplay/Entities/SlidingDoor.hpp ]
  - symbol: Krampus24::Gameplay::Entities::ElevatorShaft
    headers: [ Krampus24/Gameplay/Entities/ElevatorShaft.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Console
    headers: [ Krampus24/Gameplay/Entities/Console.hpp ]
  - symbol: Krampus24::Gameplay::Entities::PlayerShip
    headers: [ Krampus24/Gameplay/Entities/PlayerShip.hpp ]
  - symbol: Krampus24::Gameplay::Entities::PowerCoil
    headers: [ Krampus24/Gameplay/Entities/PowerCoil.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Tablet
    headers: [ Krampus24/Gameplay/Entities/Tablet.hpp ]
  - symbol: Krampus24::BlenderBlockingLoaderEntity
    headers: [ Krampus24/BlenderBlockingLoaderEntity.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Base
    headers: [ Krampus24/Gameplay/Entities/Base.hpp ]


