parent_classes:


  - class: AllegroFlare::GameConfigurations::Complete
    scope: public
    init_with: Krampus24::Game::Configurations::Main::TYPE


properties:


  - name: primary_gameplay_screen
    type: Krampus24::Gameplay::Screen*
    init_with: nullptr

  - name: primary_gameplay_subscreen
    type: AllegroFlare::Screens::Subscreen::Screen*
    init_with: nullptr

  - name: pause_screen
    type: AllegroFlare::Screens::PauseScreen*
    init_with: nullptr

  - name: TYPE
    type: char*
    init_with: '(char*)"Krampus24/Game/Configurations/Main"'
    static: true
    constexpr: true


methods:


  - name: app_icon_1024_filename
    type: std::string
    virtual: true
    override: true
    body: |
      return "icons/allegro-flare-generic-icon-1024.png";


  - name: app_title
    type: std::string
    virtual: true
    override: true
    body: |
      return "CYGNUS ATRATUS";


  - name: title_screen_title
    type: std::string
    virtual: true
    override: true
    body: |
      return "C      Y      G      N      U      S             A      T      R      A      T      U      S";


  - name: primary_display_icon_filename
    type: std::string
    virtual: true
    override: true
    body: |
      return "icons/allegro-flare-generic-icon-1024.png";


  - name: build_achievements
    virtual: true
    override: true
    type: std::vector<std::tuple<std::string, AllegroFlare::Achievement*, bool, bool>>
    body: |
      return {};
    body_dependency_symbols:
      - AllegroFlare::Achievement
 

  - name: create_primary_gameplay_screen
    type: AllegroFlare::Screens::Gameplay*
    virtual: true
    override: true
    parameters:
      - name: runner
        type: AllegroFlare::Runners::Complete*
        default_argument: nullptr
    guards: [ runner ]
    body: |
      // TODO: Find some way to remove the Runners::Complete dependency, consider injecting
      // the bin dependencies individually into this method

      Krampus24::Gameplay::Screen *result = new Krampus24::Gameplay::Screen;

      result->set_data_folder_path(runner->get_framework()->get_data_folder_path());
      //result->set_asset_studio_database(&runner->get_framework()->get_asset_studio_database_ref());
      result->set_audio_controller(&runner->get_framework()->get_audio_controller_ref());
      result->set_font_bin(runner->get_font_bin());
      result->set_bitmap_bin(runner->get_bitmap_bin());
      result->set_model_bin(runner->get_model_bin());
      result->set_event_emitter(runner->get_event_emitter());
      result->set_dialog_system(&runner->get_framework()->get_dialog_system_ref());
      //result->set_game_configuration(this);
      result->set_build_scripting_instance_func(
         [](Krampus24::Gameplay::Screen* screen) -> Krampus24::Gameplay::ScriptingInterface* {

         //std::cout << "---- ****** inside building scripting ----" << std::endl;
         // Build a scripting
         Krampus24::Game::Scripting::Tree *scripting = new Krampus24::Game::Scripting::Tree;
         scripting->set_data_folder_path(screen->get_data_folder_path());
         scripting->set_entities(&screen->get_entities_ref());
         scripting->set_collision_observer(&screen->get_collision_observer_ref());
         scripting->set_font_bin(screen->get_font_bin());
         scripting->set_dialog_system(screen->get_dialog_system());
         scripting->set_event_emitter(screen->get_event_emitter());
         scripting->initialize();

         return scripting;
      });
      result->set_on_finished_callback_func(//[](AllegroFlare::Screens::Gameplay*, void*){
         [runner](AllegroFlare::Screens::Gameplay* screen, void* user_data){
            runner->get_event_emitter()->emit_router_event(
               AllegroFlare::Routers::Standard::EVENT_PRIMARY_GAMEPLAY_SCREEN_FINISHED,
               nullptr,
               al_get_time()
            );
         }
         // HERE: Trigger a game won (DEVELOPMENT)
         //std::cout << "-- inside provided on_finished_callback_func()" << std::endl;
      //}
      );

      result->initialize();



      // HACK: Messily build the title screen customizations here, too
      // Set the title style
      auto &title_screen = runner->get_title_screen_ref();
      //title_screen.set_title_font_size(-48);
      title_screen.set_title_font_size(-48);
      title_screen.set_title_position_y(1080/2-60);
      title_screen.set_title_font_name("Orbitron-Medium.ttf");
      //title_screen.set_title_text(CubeShooter::Typography::Transforms::kern_and_uppercase("Cube Shooter", 4));

      // Set the menu style
      title_screen.set_menu_position_y(1080/12*7);
      title_screen.set_menu_font_name("Orbitron-Medium.ttf");
      title_screen.set_menu_font_size(-26);
      title_screen.set_menu_text_color(ALLEGRO_COLOR{0.8, 0.8, 0.8, 0.8});
      title_screen.set_menu_selected_text_color(ALLEGRO_COLOR{1, 1, 1, 1});
      title_screen.set_menu_selector_color(ALLEGRO_COLOR{0.0, 0.01, 0.02, 0.05});
      title_screen.set_menu_selector_outline_color(ALLEGRO_COLOR{0.8, 0.8, 0.8, 0.8});

      // Set the copyright style
      //std::string copyright_text = "Copyright 2023 - CLUBCATT Games - Version " + release_info.get_version();
      //title_screen.set_copyright_text(copyright_text);
      //title_screen.set_copyright_font_size(-18);
      //title_screen.set_copyright_text_color(AllegroFlare::Color(0xefefff, 0.2).to_al());



      // TODO: Determine if this is this the right spot for this
      runner->get_event_emitter()->emit_play_music_track_event("opening");


      primary_gameplay_screen = result;

      return result;
    body_dependency_symbols:
      - Krampus24::Gameplay::Screen
      - AllegroFlare::Runners::Complete
      - Krampus24::Game::Scripting::Tree


  - name: create_primary_gameplay_subscreen
    virtual: true
    override: true
    type: AllegroFlare::Screens::Subscreen::Screen*
    parameters:
      - name: runner
        type: AllegroFlare::Runners::Complete*
        default_argument: nullptr
    guards: [ (!primary_gameplay_subscreen) ]
    body: |
      AllegroFlare::EventEmitter* event_emitter = runner->get_event_emitter();
      AllegroFlare::BitmapBin* bitmap_bin = runner->get_bitmap_bin();
      AllegroFlare::FontBin* font_bin = runner->get_font_bin();

      // Build the subscreen_element
      AllegroFlare::Screens::Subscreen::Element *subscreen_element = new AllegroFlare::Screens::Subscreen::Element;
      subscreen_element->set_bitmap_bin(bitmap_bin);
      subscreen_element->set_font_bin(font_bin);
      subscreen_element->initialize();

      // Build and assemble the subscreen
      primary_gameplay_subscreen = new AllegroFlare::Screens::Subscreen::Screen;
      primary_gameplay_subscreen->set_event_emitter(event_emitter);
      primary_gameplay_subscreen->set_bitmap_bin(bitmap_bin);
      primary_gameplay_subscreen->set_font_bin(font_bin);
      primary_gameplay_subscreen->set_subscreen_element(subscreen_element);

      // Set the exit screen behavior
      primary_gameplay_subscreen->set_on_exit_callback_func(
         [event_emitter](AllegroFlare::Screens::Subscreen::Screen* pause_screen, void* user_data){
            event_emitter->emit_router_event(
               AllegroFlare::Routers::Standard::EVENT_UNPAUSE_GAME,
               nullptr,
               al_get_time()
            );
         }
      );
      primary_gameplay_subscreen->set_on_exit_callback_func_user_data(nullptr);

      primary_gameplay_subscreen->initialize();

      return primary_gameplay_subscreen;


  - name: create_pause_screen
    virtual: true
    override: true
    type: AllegroFlare::Screens::PauseScreen*
    parameters:
      - name: runner
        type: AllegroFlare::Runners::Complete*
        default_argument: nullptr
    guards: [ (!pause_screen) ]
    body: |
      AllegroFlare::FontBin* font_bin = runner->get_font_bin();
      AllegroFlare::BitmapBin* bitmap_bin = runner->get_bitmap_bin();
      AllegroFlare::EventEmitter* event_emitter = runner->get_event_emitter();

      std::vector<std::pair<std::string, std::string>> menu_options = {
         { "Resume", "resume_gameplay" },
         { "Exit to Title Screen", "exit_to_title_screen" },
      };

      // NOTE: No pause screen is used in this game, however, a pause screen is needed because upstream in the system
      // a  cannot be registered as a screen. // TODO: Fix this
      pause_screen = new AllegroFlare::Screens::PauseScreen;
      pause_screen->set_font_bin(font_bin);
      pause_screen->set_bitmap_bin(bitmap_bin);
      pause_screen->set_event_emitter(event_emitter);
      pause_screen->set_menu_options(menu_options);

      //pause_screen->set_foreground(shared_foreground);
      //pause_screen->set_background(shared_background);
      // TODO: Configure menu items
      // TODO: Add actions to menu items

      pause_screen->set_on_menu_choice_callback_func(
         [event_emitter](AllegroFlare::Screens::PauseScreen* pause_screen, void* user_data){
            // TODO: Perform different action depending on selected menu item
            // TODO: Use event emitter from pause_screen

            std::string current_menu_option_value = pause_screen->infer_current_menu_option_value();
            if (current_menu_option_value == "resume_gameplay")
            {
               event_emitter->emit_router_event(
                  AllegroFlare::Routers::Standard::EVENT_UNPAUSE_GAME,
                  nullptr,
                  al_get_time()
               );
            }
            else if (current_menu_option_value == "exit_to_title_screen")
            {
               // TODO: Add a "are you sure?" step here
               event_emitter->emit_router_event(
                  AllegroFlare::Routers::Standard::EVENT_ACTIVATE_TITLE_SCREEN,
                  nullptr,
                  al_get_time()
               );
            }
            else
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::GameConfigurations::Base::create_pause_screen"
                  "While in the \"on_menu_choice_callback_func\", there was no option to handle the menu value \""
                     + current_menu_option_value + "\"."
               );
            }
         }
      );
      pause_screen->set_on_menu_choice_callback_func_user_data(nullptr);

      // Set the exit screen behavior
      pause_screen->set_on_exit_callback_func(
         [event_emitter](AllegroFlare::Screens::PauseScreen* pause_screen, void* user_data){
            event_emitter->emit_router_event(
               AllegroFlare::Routers::Standard::EVENT_UNPAUSE_GAME,
               nullptr,
               al_get_time()
            );
         }
      );
      pause_screen->set_on_exit_callback_func_user_data(nullptr);

      return pause_screen;


  - name: handle_primary_gameplay_screen_paused
    virtual: true
    override: true
    guards: [ primary_gameplay_screen ]
    body: |
      // TODO: Add tests for this behavior
      // TODO: Consider having and using event_emitter from self
      AllegroFlare::EventEmitter* event_emitter = primary_gameplay_screen->get_event_emitter();
      primary_gameplay_screen->suspend_gameplay();
      event_emitter->emit_router_event(
         AllegroFlare::Routers::Standard::EVENT_ACTIVATE_PAUSE_SCREEN,
         //AllegroFlare::Routers::Standard::EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SUBSCREEN,
         nullptr,
         al_get_time()
      );
      return;


  - name: handle_primary_gameplay_screen_unpaused
    virtual: true
    override: true
    guards: [ primary_gameplay_screen ]
    body: |
      // TODO: Add tests for this behavior
      // TODO: Consider having and using event_emitter from self
      AllegroFlare::EventEmitter* event_emitter = primary_gameplay_screen->get_event_emitter();
      primary_gameplay_screen->resume_suspended_gameplay();
      event_emitter->emit_router_event(
         AllegroFlare::Routers::Standard::EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN,
         nullptr,
         al_get_time()
      );
      return;


  - name: handle_primary_gameplay_screen_finished
    virtual: true
    override: true
    body: |
      { // DEVELOPMENT
         primary_gameplay_screen->get_event_emitter()->emit_router_event(
            AllegroFlare::Routers::Standard::EVENT_WIN_GAME,
            nullptr,
            al_get_time()
         );
      }
      /*
      AllegroFlare::Elements::LevelSelect &level_select_element = 
         get_runner()->get_level_select_screen_ref().get_level_select_element_ref();
      bool level_was_won = primary_gameplay_screen->infer_level_was_won();

      if (level_was_won)
      {
         std::string current_level_identifier = primary_gameplay_screen->get_current_level_identifier();

         // In the game_progress_and_state_info, set the level as completed and save
         game_progress_and_state_info.add_level_cleared(current_level_identifier);
         game_progress_and_state_info.save();

         // On the level select screen, mark the level as completed
         //std::string current_level_identifier = primary_gameplay_screen->get_current_level_identifier();
         level_select_element.add_to_completed_list(current_level_identifier);

         // If all the levels are completed, and you just played the last level, the game is beaten
         bool all_levels_are_completed =
            level_select_element.get_completed_list().size() == level_select_element.get_levels_list().size();
         bool just_played_last_level =
            current_level_identifier == build_level_list_for_level_select_screen_by_identifier().back().second;
         if (all_levels_are_completed && just_played_last_level)
         {
            primary_gameplay_screen->get_event_emitter()->emit_router_event(
               AllegroFlare::Routers::Standard::EVENT_WIN_GAME,
               nullptr,
               al_get_time()
            );
         }
         else
         {
            primary_gameplay_screen->get_event_emitter()->emit_router_event(
               AllegroFlare::Routers::Standard::EVENT_ACTIVATE_LEVEL_SELECT_SCREEN,
               nullptr,
               al_get_time()
            );
         }
      }
      else
      {
         primary_gameplay_screen->get_event_emitter()->emit_router_event(
            AllegroFlare::Routers::Standard::EVENT_ACTIVATE_LEVEL_SELECT_SCREEN,
            nullptr,
            al_get_time()
         );
      }
      */
      return;


  - name: create_intro_logos_storyboard_pages
    virtual: true
    override: true
    type: std::vector<AllegroFlare::Elements::StoryboardPages::Base *>
    guards: [ primary_gameplay_screen ]
    body: |
      AllegroFlare::StoryboardPageFactory page_factory;
      page_factory.set_font_bin(primary_gameplay_screen->get_font_bin());
      page_factory.set_bitmap_bin(primary_gameplay_screen->get_bitmap_bin());
      page_factory.set_model_bin(primary_gameplay_screen->get_model_bin());

      std::vector<AllegroFlare::Elements::StoryboardPages::Base *> result = {
         page_factory.create_clubcatt_logo_page(),
         page_factory.create_image_page(
               primary_gameplay_screen->get_bitmap_bin()->operator[]("clubcatt-website-01.jpg")
            ),
      };

      return result;


  - name: create_intro_storyboard_pages
    virtual: true
    override: true
    type: std::vector<AllegroFlare::Elements::StoryboardPages::Base *>
    body: |
      return {};


  - name: u
    type: std::string
    parameters:
      - name: string
        type: std::string
        default_argument: '"[unset-string]"'
    body: |
      return AllegroFlare::StringTransformer(string).upcase().get_text();
    body_dependency_symbols:
      - AllegroFlare::StringTransformer


  - name: create_storyboard_page__text
    type: AllegroFlare::Elements::StoryboardPages::Base*
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
      - name: page_text
        type: std::string
        default_argument: '{}'
    guards: [ font_bin, (!page_text.empty()) ]
    body: |
      auto page = new AllegroFlare::Elements::StoryboardPages::AdvancingText(font_bin, page_text);
      return page;
    body_dependency_symbols:
      - AllegroFlare::Elements::StoryboardPages::AdvancingText


  - name: handle_arbitrary_storyboard_screen_finished
    virtual: true
    override: true
    body: |
      // TODO: Consider destroying pages in storyboard. Otherwise leakage, k?

      // Reset the name to blank
      //primary_gameplay_screen->set_arbitrary_storyboard_screen_identifier_to_start("currently-unset");

      // Emit route event to return to game
      primary_gameplay_screen->get_event_emitter()->emit_router_event(
         AllegroFlare::Routers::Standard::EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN,
         nullptr,
         al_get_time()
      );
      return;


  - name: create_arbitrary_storyboard_pages_by_identifier
    virtual: true
    override: true
    type: std::vector<AllegroFlare::Elements::StoryboardPages::Base *>
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier-IS_DISCARDED]"'
    guards: [ primary_gameplay_screen ]
    body: |
      return primary_gameplay_screen->create_arbitrary_storyboard_pages_by_identifier(); // NOTE: Naming is weird
                                                                                         // on this func
      
      //AllegroFlare::FontBin* font_bin = primary_gameplay_screen->get_font_bin();

      //identifier = primary_gameplay_screen->get_arbitrary_storyboard_screen_identifier_to_start();

      //std::vector<AllegroFlare::Elements::StoryboardPages::Base *> result = {};

      //if (identifier == "pig_storyboard")
      //{
         //result =
         //{
            //create_storyboard_page__text(font_bin,
              //"This is text from an arbitrary \"pig_storyboard\" storyboard screen."
            //),
         //};
      //}
      //else
      //{
         //AllegroFlare::Logger::throw_error(
            //"AllegroFlare::GameConfigurations::Base::create_arbitrary_storyboard_pages_by_identifier"
            //"Foobar boobaz"
         //);
      //}

      //return result;


  - name: create_new_game_intro_storyboard_pages
    virtual: true
    override: true
    type: std::vector<AllegroFlare::Elements::StoryboardPages::Base *>
    guards: [ primary_gameplay_screen ]
    body: |
      AllegroFlare::FontBin* font_bin = primary_gameplay_screen->get_font_bin();

      //return {};

      std::vector<AllegroFlare::Elements::StoryboardPages::Base *> result =
      {
         create_storyboard_page__text(font_bin,
           "Mission Log [Recording live]:\n\nI'm on route to the derelect space station TR-33 and will be docking "
              "in one minute.\n\n"
         ),
         create_storyboard_page__text(font_bin,
           "Nobody seems to know what happened at the station, but "
           "sublight communications stopped several years ago.\n\nHonestly, there's probably nothing "
           "but decayed bodies at this point.\n\n"
         ),
         create_storyboard_page__text(font_bin,
           "My mission is to make my way to the top floor of the TR-33 station, and retrieve what's left of the "
           "power coil.  It'll be worth a fortune on the dark market, even if there's no charge left."
         ),
         create_storyboard_page__text(font_bin,
           "I'm docking my ship at the DOCKING PORT at the bottom of the station, which is at the sub-level below "
              "level 1.\n\n"
           "Based on the fragmented maps I obtained, I'll need to take a series of 5 elevator shafts to "
              "the top floor, where the power coil is located."
         ),
         create_storyboard_page__text(font_bin,
           "Hm, what else was there...\n\n"
         ),
         create_storyboard_page__text(font_bin,
           "Oh, the date for this log.  I always forget.\n\n"
         ),
         create_storyboard_page__text(font_bin,
           "Today's date is...\n\n"
           "December 25 2124?\n\n"
           "Heh, Christmas day, how quaint.\n\n"
         ),
         create_storyboard_page__text(font_bin,
           "Let's hope Santa brings me a nice shiny power coil."
         ),
      };
      return result;
    body_dependency_symbols:
      - AllegroFlare::StoryboardPageFactory


  - name: build_title_screen_menu_options
    virtual: true
    override: true
    type: std::vector<std::pair<std::string, std::string>>
    body: |
      //AllegroFlare::Logger::throw_error(
         //"AllegroFlare::GameConfigurations::Base::build_title_screen_menu_options",
            //"Not implemented in the base class. This method must be implemented in the derived class"
      //);
      std::vector<std::pair<std::string, std::string>> options = {
         //{ "Continue",          "continue_from_last_save" },       // TODO: If game session is saved and valid
         //{ "Load a Saved Game", "goto_load_a_saved_game_screen" }, // TODO: If game session is saved and valid,
                                                                   // and the game supports save slots
         { "Start New Game",    "start_new_game" },                // TODO: If the game session has not begun
         //{ "Achievements",      "goto_achievements_screen" },
         //{ "Settings",          "goto_settings_screen" },
         { "Settings",          "goto_display_settings_screen" },
         //{ "Version",           "goto_version_screen" },
         //{ "Credits",           "goto_credits_screen" },           // TODO: If game has been won
         { "Quit",              "quit" },
      };
      return options;


  - name: load_audio_controller
    virtual: true
    override: true
    parameters:
      - name: audio_controller
        type: AllegroFlare::AudioController*
        default_argument: nullptr
    guards: [ audio_controller ]
    body: |
      //AllegroFlare::AudioController *audio_controller = get_framework_audio_controller();
      audio_controller->set_and_load_sound_effect_elements(
         Krampus24::Game::Scripting::Tree().build_audio_controller_sound_effect_list()
      );
      audio_controller->set_and_load_music_track_elements(
         Krampus24::Game::Scripting::Tree().build_audio_controller_music_track_list()
      );
      // An example of how to load a sound effect track:
      //audio_controller->set_and_load_sound_effect_elements({
         //{ "menu_move", { "ci-menu_move-01.ogg", false, "restart" } },
         //{ "menu_select", { "ci-menu_choice-01.ogg", false, "restart" } },
      //});

      // How to play a sound effect:
      // event_emitter->emit_play_music_track_event("menu_select");

      //// An example of how to load a music track:
      //audio_controller.set_and_load_music_track_elements({
         ////{ "intro_music", { "wanderer-01.ogg", true, "ignore" } },
      //});

      // How to play a music track:
      // event_emitter->emit_play_music_track_event("intro_music");
      return;
    body_dependency_symbols:
      - Krampus24::Gameplay::Entities::Door



  - name: load_last_played_session_or_start_new
    virtual: true
    override: true
    parameters:
      - name: game_session
        type: AllegroFlare::GameSession*
        default_argument: nullptr
    guards: [ game_session ]
    body: |
      // TODO: This method
      //AllegroFlare::GameProgressAndStateInfos::Base *game_progress_and_state_info =
        //game_session->get_game_progress_and_state_info();
      return;
    body_dependency_symbols:
      - AllegroFlare::GameProgressAndStateInfos::Base


  - name: setup_new_game_progress_and_state_info
    virtual: true
    override: true
    parameters:
      - name: game_session
        type: AllegroFlare::GameSession*
        default_argument: nullptr
    guards: [ game_session ]
    body: |
      // TODO: This method
      //AllegroFlare::Logger::throw_error(
         //"AllegroFlare::GameConfigurations::Base::setup_new_game_progress_and_state_info",
         //"Not implemented in the base class. This method must be implemented in the derived class"
      //);
      //AllegroFlare::GameProgressAndStateInfos::Base *game_progress_and_state_info =
        //game_session->get_game_progress_and_state_info();
      return;
    body_dependency_symbols:
      - AllegroFlare::GameProgressAndStateInfos::Base


  - name: build_save_slots_for_load_a_saved_game_screen
    virtual: true
    override: true
    type: std::vector<AllegroFlare::LoadASavedGame::SaveSlots::Base*>
    body: |
      /*
      std::vector<AllegroFlare::LoadASavedGame::SaveSlots::Base*> result = {
         new AllegroFlare::LoadASavedGame::SaveSlots::Empty(), // TODO: Fill this list with items from save file
         new AllegroFlare::LoadASavedGame::SaveSlots::Empty(),
         new AllegroFlare::LoadASavedGame::SaveSlots::Empty(),
      };
      return result;
      */
      return {};


  - name: handle_game_event
    virtual: true
    override: true
    parameters:
      - name: game_event
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    body: |
      //// TODO: Handle top-level game events here
      //if (game_event->is_type(AllegroFlare::GameEventDatas::ScreenActivated::NAME))
      //{
         //AllegroFlare::GameEventDatas::ScreenActivated* as =
           //static_cast<AllegroFlare::GameEventDatas::ScreenActivated*>(game_event->get_data());

         //// TODO: Handle game-specific logic for a after a screen switch
      //}
      if (game_event->get_type() == AllegroFlare::GameEventDatas::AchievementUnlocked::NAME)
      {
         if (game_event->get_data()->is_type(AllegroFlare::GameEventDatas::AchievementUnlocked::TYPE))
         {
            AllegroFlare::GameEventDatas::AchievementUnlocked *as =
               static_cast<AllegroFlare::GameEventDatas::AchievementUnlocked *>(game_event->get_data());
            // TODO: Handle saving progress of achievements. Something like below.
            // See this guide:
            // https://docs.google.com/document/d/1QdDVa6giZOmGbF61dgom1ZJ_Ev5OFvZEM2Bc453RjGw/edit
            //mark_achievement_as_unlocked_and_save_progress(as->get_achievement_identifier());
         }
         else
         {
            throw std::runtime_error("Gameplay/Runner/game_event_func: unexpected AchievementUnlocked event data type");
         }
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::EventNames
      - AllegroFlare::GameEventDatas::AchievementUnlocked


  - name: continue_from_last_save
    body: |
      // TODO: Consider adding this method as part of the standard system
      return;


  - name: build_level_list_for_level_select_screen_by_identifier
    virtual: true
    override: true
    type: std::vector<std::pair<std::string, std::string>>
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      std::vector<std::pair<std::string, std::string>> result = {
         //{ "Forest Village 1", "forest_village_1" },
         //{ "Forest Village 2", "forest_village_2" },
         //{ "Forest", "forest_1" },
         //{ "Crystal Cave", "crystal_cave_1" },
         //{ "Desert Town", "desert_town_3" },
         //{ "Town 2", "town_2" },
         //{ "Cave 1", "cave_1" },
         //{ "Town 1", "town_1" },
      };
      return result;


  - name: build_dialog_bank_by_identifier
    virtual: true
    override: true
    type: AllegroFlare::DialogTree::NodeBank
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[identifier-discarded]"'
    body: |
      // TODO: Test this contains the expected nodes
      AllegroFlare::DialogTree::NodeBank result_node_bank;

      // TODO: Consider joining the system nodes outside of the LevelFactory
      //AllegroFlare::DialogTree::NodeBank system_node_bank =
         //AllegroFlare::DialogTree::NodeBankFactory::build_common_system_dialogs_node_bank();
      //result_node_bank.merge(&system_node_bank);


      // HACK!! For production, we're building a dialog tree here, as well as in the game system.  It leaves
      // dangling pointers and all these things, it's unsure what the side effects could be from double-building
      // this dialog node bank
      Krampus24::Game::Scripting::Tree tree;
      result_node_bank = tree.build_dialog_node_bank();
      

      return result_node_bank;
    body_dependency_symbols:
      - AllegroFlare::DialogTree::NodeBankFactory


  - name: load_level_by_identifier
    virtual: true
    override: true
    type: AllegroFlare::Levels::Base*
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      // TODO: Replace void* with a better type (once the design is clear)
      Krampus24::Gameplay::Level *result = new Krampus24::Gameplay::Level();

      std::map<std::string, std::function<void()>> items_map = {
         { "", [](){
            AllegroFlare::Logger::warn_from(
               "Krampus24::GameConfigurations::Main::load_level_by_identifier",
               "Loading a completely blank empty level."
            );
            // TODO: Add warning: loading an empty level
         }},
         { "forest_village_1", [](){
            //result->set_background_image_identifier("maps/forest-village-1.png");
         }},
         //{ "forest_village_2", [](){
            //result->set_background_image_identifier("maps/forest-village-2.png");
         //}},
         //{ "forest_1", [result](){
            //result->set_background_image_identifier("maps/forest-1.png");
         //}},
         //{ "crystal_cave_1", [result](){
            //result->set_background_image_identifier("maps/crystal-cave-1.png");
         //}},
         //{ "desert_town_3", [result](){
            //result->set_background_image_identifier("maps/desert-town-3.png");
         //}},
         //{ "town_2", [result](){
            //result->set_background_image_identifier("maps/town-2.png");
         //}},
         //{ "cave_1", [result](){
            //result->set_background_image_identifier("maps/rpg-fit-backgrounds-ex-101.png");
         //}},
         //{ "town_1", [result](){
            //result->set_background_image_identifier("maps/rpg-fit-backgrounds-x2-01.png");
         //}},
      };

      // locate and call the function to handle the item
      if (items_map.count(identifier) == 0)
      {
         bool item_handled = false;
         //if (unrecognized_key_callback_func)
         //{
            //item_handled = unrecognized_key_callback_func();
         //}

         if (!item_handled)
         {
            // item not found
            std::stringstream error_message;
            error_message << "[Krampus24::Game::Configurations::Main::load_level]: error: Cannot load the item with the identifier \""
                          << identifier << "\", it does not exist.";
            throw std::runtime_error(error_message.str());
         }
      }
      else
      {
         // call the item
         items_map[identifier]();
      }

      return result;
    body_dependency_symbols:
     - Krampus24::Gameplay::Level
     - std::function
     - std::stringstream
     - std::map


dependencies:


  - symbol: AllegroFlare::GameConfigurations::Complete
    headers: [ AllegroFlare/GameConfigurations/Complete.hpp ]
  - symbol: AllegroFlare::Levels::Base
    headers: [ AllegroFlare/Levels/Base.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeBank
    headers: [ AllegroFlare/DialogTree/NodeBank.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeBankFactory
    headers: [ AllegroFlare/DialogTree/NodeBankFactory.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::Wait
    headers: [ AllegroFlare/DialogTree/Nodes/Wait.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::ExitProgram
    headers: [ AllegroFlare/DialogTree/Nodes/ExitProgram.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::MultipageWithOptions
    headers: [ AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::GoToNode
    headers: [ AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::ExitDialog
    headers: [ AllegroFlare/DialogTree/NodeOptions/ExitDialog.hpp ]
  - symbol: Krampus24::Gameplay::Level
    headers: [ Krampus24/Gameplay/Level.hpp ]
  - symbol: AllegroFlare::Achievement
    headers: [ AllegroFlare/Achievement.hpp ]
  - symbol: AllegroFlare::Elements::StoryboardPages::Base
    headers: [ AllegroFlare/Elements/StoryboardPages/Base.hpp ]
  - symbol: AllegroFlare::StoryboardPageFactory
    headers: [ AllegroFlare/StoryboardPageFactory.hpp ]
  - symbol: AllegroFlare::GameSession
    headers: [ AllegroFlare/GameSession.hpp ]
  - symbol: AllegroFlare::GameProgressAndStateInfos::Base
    headers: [ AllegroFlare/GameProgressAndStateInfos/Base.hpp ]
  - symbol: AllegroFlare::LoadASavedGame::SaveSlots::Base
    headers: [ AllegroFlare/LoadASavedGame/SaveSlots/Base.hpp ]
  - symbol: Krampus24::Gameplay::Screen
    headers: [ Krampus24/Gameplay/Screen.hpp ]
  - symbol: AllegroFlare::Screens::Gameplay
    headers: [ AllegroFlare/Screens/Gameplay.hpp ]
  - symbol: AllegroFlare::Runners::Complete
    headers: [ AllegroFlare/Runners/Complete.hpp ]
  - symbol: AllegroFlare::AudioController
    headers: [ AllegroFlare/AudioController.hpp ]
  - symbol: AllegroFlare::EventNames
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: AllegroFlare::GameEventDatas::AchievementUnlocked
    headers: [ AllegroFlare/GameEventDatas/AchievementUnlocked.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::Screens::PauseScreen
    headers: [ AllegroFlare/Screens/PauseScreen.hpp ]
  - symbol: AllegroFlare::Screens::Subscreen::Screen
    headers: [ AllegroFlare/Screens/Subscreen/Screen.hpp ]
  - symbol: Krampus24::Game::Scripting::Tree
    headers: [ Krampus24/Game/Scripting/Tree.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Door
    headers: [ Krampus24/Gameplay/Entities/Door.hpp ]
  - symbol: AllegroFlare::Elements::StoryboardPages::AdvancingText
    headers: [ AllegroFlare/Elements/StoryboardPages/AdvancingText.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::StringTransformer
    headers: [ AllegroFlare/StringTransformer.hpp ]


