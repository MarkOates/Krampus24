parent_classes:


  - class: Krampus24::Gameplay::ScriptingInterface
    scope: public
    init_with: ''


properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    setter: before_initialized

  - name: entities
    type: std::vector<Krampus24::Gameplay::Entities::Base*>*
    init_with: nullptr
    setter: before_initialized

  - name: primary_power_coil_collected
    type: bool
    init_with: false
    getter: true
    setter: true

  - name: primary_power_coil_returned_to_ship
    type: bool
    init_with: false
    getter: true
    setter: true

  - name: collision_observer
    type: AllegroFlare::CollisionObservers::Simple*
    init_with: nullptr
    setter: before_initialized

  - name: initialized
    type: bool
    init_with: false
    getter: true


methods:


  - name: render_hud
    virtual: true
    override: true
    body: |
      if (primary_power_coil_collected)
      {
         al_draw_textf(
            obtain_hud_font(),
            ALLEGRO_COLOR{1, 0.65, 0, 1.0},
            40,
            30,
            ALLEGRO_ALIGN_LEFT,
            "PRIMARY POWER COIL COLLECTED"
         );
      }
      return;


  - name: end_state_achieved
    type: bool
    virtual: true
    override: true
    body: |
      return primary_power_coil_returned_to_ship;


  - name: a_0th_entity_exists
    type: bool
    guards: [ initialized ]
    body: |
      return (entities->size() > 0);


  - name: find_0th_entity
    type: Krampus24::Gameplay::Entities::Base*
    guards: [ initialized, (entities->size() > 0) ]
    body: |
      return entities->at(0);


  - name: initialize
    guards:
      - (!initialized)
      - entities
      - collision_observer
      - font_bin
    body: |
      initialized = true;
      build_on_collision_callbacks();
      return;


  - name: entity_with_name_exists
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    guards: [ entities ]
    body: |
      for (auto entity : *entities)
      {
         if (entity->name == name) return true;
      }
      return false;


  - name: find_entity_by_name_or_throw
    type: Krampus24::Gameplay::Entities::Base*
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    guards: [ entity_with_name_exists(name) ]
    body: |
      // TODO: Improve error message on entity_with_name_exists(name)
      for (auto entity : *entities)
      {
         if (entity->name == name) return entity;
      }
      // TODO: Improve throw
      throw std::runtime_error("asdfasdfasdfasdfasdfasdf");
      return nullptr;


  - name: link_elevators
    parameters:
      - name: elevator_a_name
        type: std::string
        default_argument: '"[unset-elevator_a_name]"'
      - name: elevator_b_name
        type: std::string
        default_argument: '"[unset-elevator_b_name]"'
    body: |
      Krampus24::Gameplay::Entities::Base* elevator_a = find_entity_by_name_or_throw(elevator_a_name);
      Krampus24::Gameplay::Entities::Base* elevator_b = find_entity_by_name_or_throw(elevator_b_name);
      elevator_a->elevator__target = elevator_b;
      elevator_b->elevator__target = elevator_a;
      return;


  - name: travel_player_to_elevators_target
    parameters:
      - name: entering_elevator_name
        type: std::string
        default_argument: '"[unset-entering_elevator_name]"'
    body: |
      auto *player_entity = find_0th_entity();
      auto *target_elevator = find_entity_by_name_or_throw(entering_elevator_name)->elevator__target;

      player_entity->placement.position =
         target_elevator->placement.position + AllegroFlare::Vec3D(0, 0.5, 0);
      collision_observer->passively_add_to_currently_colliding(target_elevator);
      return;


  - name: build_on_collision_callbacks
    private: true
    body: |
      link_elevators("elevator-01", "elevator-02");
      link_elevators("elevator-03", "elevator-04");
      link_elevators("elevator-05", "elevator-06");
      link_elevators("elevator-07", "elevator-08");
      link_elevators("elevator-09", "elevator-10");

      on_entity_collision_callbacks = {
         { find_entity_by_name_or_throw("elevator-01"), [this](){
            travel_player_to_elevators_target("elevator-01");
         }},
         { find_entity_by_name_or_throw("elevator-02"), [this](){
            travel_player_to_elevators_target("elevator-02");
         }},
         { find_entity_by_name_or_throw("elevator-03"), [this](){
            travel_player_to_elevators_target("elevator-03");
         }},
         { find_entity_by_name_or_throw("elevator-04"), [this](){
            travel_player_to_elevators_target("elevator-04");
         }},
         { find_entity_by_name_or_throw("elevator-05"), [this](){
            travel_player_to_elevators_target("elevator-05");
         }},
         { find_entity_by_name_or_throw("elevator-06"), [this](){
            travel_player_to_elevators_target("elevator-06");
         }},
         { find_entity_by_name_or_throw("elevator-07"), [this](){
            travel_player_to_elevators_target("elevator-07");
         }},
         { find_entity_by_name_or_throw("elevator-08"), [this](){
            travel_player_to_elevators_target("elevator-08");
         }},
         { find_entity_by_name_or_throw("elevator-09"), [this](){
            travel_player_to_elevators_target("elevator-09");
         }},
         { find_entity_by_name_or_throw("elevator-10"), [this](){
            travel_player_to_elevators_target("elevator-10");
         }},

         { find_entity_by_name_or_throw("player_ship"), [this](){
            //travel_player_to_elevators_target("elevator-10");
            if (primary_power_coil_collected)
            {
               primary_power_coil_returned_to_ship = true;
            }
         }},
         { find_entity_by_name_or_throw("primary_power_coil"), [this](){
            find_entity_by_name_or_throw("primary_power_coil")->active = false;
            find_entity_by_name_or_throw("primary_power_coil")->visible = false;
            primary_power_coil_collected = true;
         }},
      };
      return;


  - name: obtain_hud_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin->auto_get("Oswald-Medium.ttf -52");


dependencies:


  - symbol: Krampus24::Gameplay::ScriptingInterface
    headers: [ Krampus24/Gameplay/ScriptingInterface.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Base
    headers: [ Krampus24/Gameplay/Entities/Base.hpp ]
  - symbol: AllegroFlare::CollisionObservers::Simple
    headers: [ AllegroFlare/CollisionObservers/Simple.hpp ]
  - symbol: Krampus24::Gameplay::Screen
    headers: [ Krampus24/Gameplay/Screen.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]


