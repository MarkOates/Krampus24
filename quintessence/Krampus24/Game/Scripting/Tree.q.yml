properties:


  - name: entities
    type: std::vector<Krampus24::Gameplay::Entities::Base*>*
    init_with: nullptr
    setter: before_initialized

  - name: collision_observer
    type: AllegroFlare::CollisionObservers::Simple*
    init_with: nullptr
    setter: before_initialized

  - name: on_entity_collision_callbacks
    type: std::map<void*, std::function<void()>>
    init_with: '{}'
    getter: true
    setter: true

  - name: initialized
    type: bool
    init_with: false
    getter: true


methods:


  - name: a_0th_entity_exists
    type: bool
    guards: [ initialized ]
    body: |
      return (entities->size() > 0);


  - name: find_0th_entity
    type: Krampus24::Gameplay::Entities::Base*
    guards: [ initialized, (entities->size() > 0) ]
    body: |
      return entities->at(0);


  - name: initialize
    guards:
      - (!initialized)
      - entities
      - collision_observer
    body: |
      initialized = true;
      return;


  - name: has_on_collision_callback
    type: bool
    parameters:
      - name: entity
        type: void*
        default_argument: nullptr
    body: |
      return on_entity_collision_callbacks.find(entity) != on_entity_collision_callbacks.end();


  - name: call_on_collision_callback
    parameters:
      - name: entity
        type: void*
        default_argument: nullptr
    guards: [ has_on_collision_callback(entity) ]
    body: |
      on_entity_collision_callbacks[entity]();
      return;


  - name: entity_with_name_exists
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    guards: [ entities ]
    body: |
      for (auto entity : *entities)
      {
         if (entity->name == name) return true;
      }
      return false;


  - name: find_entity_by_name_or_throw
    type: Krampus24::Gameplay::Entities::Base*
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    guards: [ entity_with_name_exists(name) ]
    body: |
      // TODO: Improve error message on entity_with_name_exists(name)
      for (auto entity : *entities)
      {
         if (entity->name == name) return entity;
      }
      // TODO: Improve throw
      throw std::runtime_error("asdfasdfasdfasdfasdfasdf");
      return nullptr;


  - name: build_on_collision_callbacks
    body: |
      on_entity_collision_callbacks = {
         { find_entity_by_name_or_throw("elevator1"), [this](){
            // TODO: Do thing
            std::cout << "Entered elevator1" << std::endl;
            auto *player_entity = find_0th_entity();
            auto *target_elevator = find_entity_by_name_or_throw("elevator2");
            player_entity->get_placement_ref().position =
               target_elevator->get_placement_ref().position + AllegroFlare::Vec3D(0, 0.5, 0);
            collision_observer->passively_add_to_currently_colliding(target_elevator);
         }},
         { find_entity_by_name_or_throw("elevator2"), [this](){
            // TODO: Do thing
            std::cout << "Entered elevator2" << std::endl;
            auto *player_entity = find_0th_entity();
            auto *target_elevator = find_entity_by_name_or_throw("elevator1");
            player_entity->get_placement_ref().position =
               target_elevator->get_placement_ref().position + AllegroFlare::Vec3D(0, 0.5, 0);
            collision_observer->passively_add_to_currently_colliding(target_elevator);
         }},
      };
      return;


dependencies:


  - symbol: Krampus24::Gameplay::Entities::Base
    headers: [ Krampus24/Gameplay/Entities/Base.hpp ]
  - symbol: AllegroFlare::CollisionObservers::Simple
    headers: [ AllegroFlare/CollisionObservers/Simple.hpp ]


