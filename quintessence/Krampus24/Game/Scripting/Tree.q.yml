parent_classes:


  - class: Krampus24::Gameplay::ScriptingInterface
    scope: public
    init_with: ''


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    setter: before_initialized

  - name: dialog_system
    type: AllegroFlare::DialogSystem::DialogSystem*
    init_with: nullptr
    setter: before_initialized

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    setter: before_initialized

  - name: entities
    type: std::vector<Krampus24::Gameplay::Entities::Base*>*
    init_with: nullptr
    setter: before_initialized

  - name: primary_power_coil_collected
    type: bool
    init_with: false
    getter: true
    setter: true

  - name: primary_power_coil_returned_to_ship
    type: bool
    init_with: false
    getter: true
    setter: true

  - name: collision_observer
    type: AllegroFlare::CollisionObservers::Simple*
    init_with: nullptr
    setter: before_initialized

  - name: initialized
    type: bool
    init_with: false
    getter: true


methods:


  - name: game_event_func
    virtual: true
    override: true
    parameters:
      - name: game_event
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    guards: [ game_event ]
    body: |
      // TODO: Handle different events
      if (game_event->is_type("unlock_mega_door")) unlock_mega_door("mega_door.001");
      if (game_event->is_type("unlock_elevator_1")) unlock_door("door.003");
      if (game_event->is_type("unlock_elevator_2")) unlock_door("door.005");
      if (game_event->is_type("unlock_vr_room")) unlock_sliding_door("sliding_door.001");
      if (game_event->is_type("unlock_elevator_3")) unlock_door("door.006");
      if (game_event->is_type("unlock_elevator_4")) unlock_sliding_door("sliding_door.002");
      return;


  - name: render_hud
    virtual: true
    override: true
    body: |
      if (primary_power_coil_collected)
      {
         al_draw_textf(
            obtain_hud_font(),
            ALLEGRO_COLOR{1, 0.65, 0, 1.0},
            40,
            30,
            ALLEGRO_ALIGN_LEFT,
            "PRIMARY POWER COIL COLLECTED"
         );
      }
      return;


  - name: end_state_achieved
    type: bool
    virtual: true
    override: true
    body: |
      return primary_power_coil_returned_to_ship;


  - name: a_0th_entity_exists
    type: bool
    guards: [ initialized ]
    body: |
      return (entities->size() > 0);


  - name: find_0th_entity
    type: Krampus24::Gameplay::Entities::Base*
    guards: [ initialized, (entities->size() > 0) ]
    body: |
      return entities->at(0);


  - name: initialize
    guards:
      - (!initialized)
      - event_emitter
      - dialog_system
      - entities
      - collision_observer
      - font_bin
    body: |
      initialized = true;
      build_on_collision_callbacks();
      return;


  - name: get_entities_names_in_list
    type: std::pair<int, std::string>
    body: |
      // TODO: Test this method
      std::set<std::string> result;
      for (auto entity : *entities) result.insert(entity->name);

      std::stringstream result_str;
      result_str << "[";
      for (auto& res : result)
      {
         result_str << res << ", ";
      }
      result_str << "]";

      return { result.size(), result_str.str() };
    body_dependency_symbols:
      - std::stringstream
      - std::set


  - name: entity_with_name_exists
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    guards: [ entities ]
    body: |
      for (auto entity : *entities)
      {
         if (entity->name == name) return true;
      }
      return false;


  - name: find_entity_by_name_or_throw
    type: Krampus24::Gameplay::Entities::Base*
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    guards: [ entities ]
    body: |
      // TODO: Improve error message on entity_with_name_exists(name)
      if (!entity_with_name_exists(name))
      {
         int num_entities = entities->size();
         int num_unique_entity_names = 0;
         std::string unique_entity_names = "";
         std::tie(num_unique_entity_names, unique_entity_names) = get_entities_names_in_list();

         AllegroFlare::Logger::throw_error(
            "Krampus24::Game::Scripting::Tree::find_entity_by_name_or_throw",
            "An entity with the name \"" + name + "\" does not exist. There are " + std::to_string(num_entities)
               + " entities, and the following " + std::to_string(num_unique_entity_names) + " unique entity "
               "names are present: " + unique_entity_names
         );
      }

      for (auto entity : *entities)
      {
         if (entity->name == name) return entity;
      }
      // TODO: Improve throw
      throw std::runtime_error("asdfasdfasdfasdfasdfasdf");
      return nullptr;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: interact_with_focused_object
    type: bool
    virtual: true
    override: true
    parameters:
      - name: inspectable_entity_that_player_is_currently_colliding_with
        type: Krampus24::Gameplay::Entities::Base*
        default_argument: nullptr
    guards: [ inspectable_entity_that_player_is_currently_colliding_with ]
    body: |
      //throw std::runtime_error("-------------------------=-=-=-=--=======================");

      auto &name = inspectable_entity_that_player_is_currently_colliding_with->name;

      if (name == "sliding_door.001")
      {
         event_emitter->emit_activate_dialog_node_by_name_event("locked_door");
      }
      else if (name == "console-01")
      {
         event_emitter->emit_activate_dialog_node_by_name_event("console-01-dialog");
      }
      else if (name == "console-02")
      {
         event_emitter->emit_activate_dialog_node_by_name_event("console-02-dialog");
      }
      else if (name == "console-03")
      {
         event_emitter->emit_activate_dialog_node_by_name_event("console-03-dialog");
      }
      else if (name == "console-04")
      {
         event_emitter->emit_activate_dialog_node_by_name_event("console-04-dialog");
      }
      else if (name == "console-05")
      {
         event_emitter->emit_activate_dialog_node_by_name_event("console-05-dialog");
      }
      else if (name == "console-06")
      {
         event_emitter->emit_activate_dialog_node_by_name_event("console-06-dialog");
      }
         //{ find_entity_by_name_or_throw("console-01"), [this](){
            //travel_player_to_elevators_target("elevator-01");
         //}},


      // Return "true" if an interaction occurred (otherwise it will indicate to the Gameplay/Screen that nothing
      // happened, it may play a "no interaction" sound, for example)
      return false;


  - name: link_elevators
    parameters:
      - name: elevator_a_name
        type: std::string
        default_argument: '"[unset-elevator_a_name]"'
      - name: elevator_b_name
        type: std::string
        default_argument: '"[unset-elevator_b_name]"'
    body: |
      Krampus24::Gameplay::Entities::Base* elevator_a = find_entity_by_name_or_throw(elevator_a_name);
      Krampus24::Gameplay::Entities::Base* elevator_b = find_entity_by_name_or_throw(elevator_b_name);
      elevator_a->elevator__target = elevator_b;
      elevator_b->elevator__target = elevator_a;
      return;


  - name: set_elevator_shaft_num_tiers
    parameters:
      - name: elevator_shaft_name
        type: std::string
        default_argument: '"[unset-elevator_shaft_name]"'
      - name: num_tiers
        type: float
        default_argument: 4.0f
    body: |
      Krampus24::Gameplay::Entities::Base* e = find_entity_by_name_or_throw(elevator_shaft_name);

      // NOTE: Warning: assuming this is an Entities::Door!
      // TODO: Validate this is a door!
      auto as = static_cast<Krampus24::Gameplay::Entities::ElevatorShaft*>(e);
      as->set_num_tiers(num_tiers);
      return;
    body_dependency_symbols:
      - Krampus24::Gameplay::Entities::ElevatorShaft


  - name: customize_door_style
    parameters:
      - name: door_object_name
        type: std::string
        default_argument: '"[unset-door_object_name]"'
      - name: door_style
        type: Krampus24::Gameplay::Entities::Door::Style
        default_argument: Krampus24::Gameplay::Entities::Door::Style::STYLE_BARN
    body: |
      Krampus24::Gameplay::Entities::Base* door = find_entity_by_name_or_throw(door_object_name);

      // NOTE: Warning: assuming this is an Entities::Door!
      // TODO: Validate this is a door!
      auto as = static_cast<Krampus24::Gameplay::Entities::Door*>(door);
      as->set_style(door_style);
      return;


  - name: lock_sliding_door
    parameters:
      - name: sliding_door_object_name
        type: std::string
        default_argument: '"[unset-sliding_door_object_name]"'
    body: |
      Krampus24::Gameplay::Entities::Base* door = find_entity_by_name_or_throw(sliding_door_object_name);

      // NOTE: Warning: assuming this is an Entities::Door!
      // TODO: Validate this is a door!
      auto as = static_cast<Krampus24::Gameplay::Entities::SlidingDoor*>(door);
      as->lock();
      return;
    body_dependency_symbols:
      - Krampus24::Gameplay::Entities::SlidingDoor


  - name: unlock_sliding_door
    parameters:
      - name: sliding_door_object_name
        type: std::string
        default_argument: '"[unset-sliding_door_object_name]"'
    body: |
      Krampus24::Gameplay::Entities::Base* door = find_entity_by_name_or_throw(sliding_door_object_name);

      // NOTE: Warning: assuming this is an Entities::Door!
      // TODO: Validate this is a door!
      auto as = static_cast<Krampus24::Gameplay::Entities::SlidingDoor*>(door);
      as->unlock();
      return;
    body_dependency_symbols:
      - Krampus24::Gameplay::Entities::SlidingDoor


  - name: lock_mega_door
    parameters:
      - name: mega_door_object_name
        type: std::string
        default_argument: '"[unset-mega_door_object_name]"'
    body: |
      Krampus24::Gameplay::Entities::Base* door = find_entity_by_name_or_throw(mega_door_object_name);

      // NOTE: Warning: assuming this is an Entities::Door!
      // TODO: Validate this is a door!
      auto as = static_cast<Krampus24::Gameplay::Entities::MegaDoor*>(door);
      as->lock();
      return;
    body_dependency_symbols:
      - Krampus24::Gameplay::Entities::MegaDoor


  - name: unlock_mega_door
    parameters:
      - name: mega_door_object_name
        type: std::string
        default_argument: '"[unset-mega_door_object_name]"'
    body: |
      Krampus24::Gameplay::Entities::Base* door = find_entity_by_name_or_throw(mega_door_object_name);

      // NOTE: Warning: assuming this is an Entities::Door!
      // TODO: Validate this is a door!
      auto as = static_cast<Krampus24::Gameplay::Entities::MegaDoor*>(door);
      as->unlock();
      return;
    body_dependency_symbols:
      - Krampus24::Gameplay::Entities::MegaDoor


  - name: lock_door
    parameters:
      - name: door_object_name
        type: std::string
        default_argument: '"[unset-door_object_name]"'
    body: |
      Krampus24::Gameplay::Entities::Base* door = find_entity_by_name_or_throw(door_object_name);

      // NOTE: Warning: assuming this is an Entities::Door!
      // TODO: Validate this is a door!
      auto as = static_cast<Krampus24::Gameplay::Entities::Door*>(door);
      as->lock();
      return;
    body_dependency_symbols:
      - Krampus24::Gameplay::Entities::SlidingDoor


  - name: unlock_door
    parameters:
      - name: door_object_name
        type: std::string
        default_argument: '"[unset-door_object_name]"'
    body: |
      Krampus24::Gameplay::Entities::Base* door = find_entity_by_name_or_throw(door_object_name);

      // NOTE: Warning: assuming this is an Entities::Door!
      // TODO: Validate this is a door!
      auto as = static_cast<Krampus24::Gameplay::Entities::Door*>(door);
      as->unlock();
      return;
    body_dependency_symbols:
      - Krampus24::Gameplay::Entities::SlidingDoor


  - name: travel_player_to_elevators_target
    parameters:
      - name: entering_elevator_name
        type: std::string
        default_argument: '"[unset-entering_elevator_name]"'
    body: |
      auto *player_entity = find_0th_entity();
      auto *target_elevator = find_entity_by_name_or_throw(entering_elevator_name)->elevator__target;

      player_entity->placement.position =
         target_elevator->placement.position + AllegroFlare::Vec3D(0, 0.5, 0);
      collision_observer->passively_add_to_currently_colliding(target_elevator);
      return;


  - name: build_on_collision_callbacks
    private: true
    body: |
      // Build and load the dialog system
      dialog_system->set_dialog_node_bank(build_dialog_node_bank());


      // Customize some door styles
      customize_door_style("door.008", Krampus24::Gameplay::Entities::Door::Style::STYLE_NORMAL_DISRUPTED);

      //lock_door("door.003"); // Elevator on 1st floor leading up to 2nd
      lock_door("door.005"); // Elevator on 2nd floor leading up to 3rd floor
      lock_door("door.006"); // Elevator on 3rd floor (armory) leading up to 4rd floor
      lock_sliding_door("sliding_door.001"); // Door to VR room (1st floor)
      lock_sliding_door("sliding_door.002"); // Elevator on 4th floor leading to final room (with power coil)
      lock_mega_door("mega_door.001"); // Major door on the first floor


      set_elevator_shaft_num_tiers("elevator_shaft-01", 6);

      // Link the elevators
      //link_elevators("elevator-01", "elevator-02");
      //link_elevators("elevator-03", "elevator-04");
      link_elevators("elevator-05", "elevator-06");
      link_elevators("elevator-07", "elevator-08");
      link_elevators("elevator-09", "elevator-10");

      on_entity_collision_callbacks = {
         //{ find_entity_by_name_or_throw("hen-01"), [this](){
            //travel_player_to_elevators_target("elevator-01");
         //}},

         //{ find_entity_by_name_or_throw("elevator-01"), [this](){
            //travel_player_to_elevators_target("elevator-01");
         //}},
         //{ find_entity_by_name_or_throw("elevator-02"), [this](){
            //travel_player_to_elevators_target("elevator-02");
         //}},
         //{ find_entity_by_name_or_throw("elevator-03"), [this](){
            //travel_player_to_elevators_target("elevator-03");
         //}},
         //{ find_entity_by_name_or_throw("elevator-04"), [this](){
            //travel_player_to_elevators_target("elevator-04");
         //}},
         { find_entity_by_name_or_throw("elevator-05"), [this](){
            travel_player_to_elevators_target("elevator-05");
         }},
         { find_entity_by_name_or_throw("elevator-06"), [this](){
            travel_player_to_elevators_target("elevator-06");
         }},
         { find_entity_by_name_or_throw("elevator-07"), [this](){
            travel_player_to_elevators_target("elevator-07");
         }},
         { find_entity_by_name_or_throw("elevator-08"), [this](){
            travel_player_to_elevators_target("elevator-08");
         }},
         { find_entity_by_name_or_throw("elevator-09"), [this](){
            travel_player_to_elevators_target("elevator-09");
         }},
         { find_entity_by_name_or_throw("elevator-10"), [this](){
            travel_player_to_elevators_target("elevator-10");
         }},

         { find_entity_by_name_or_throw("player_ship"), [this](){
            //travel_player_to_elevators_target("elevator-10");
            if (primary_power_coil_collected)
            {
               primary_power_coil_returned_to_ship = true;
            }
         }},
         { find_entity_by_name_or_throw("primary_power_coil"), [this](){
            find_entity_by_name_or_throw("primary_power_coil")->active = false;
            find_entity_by_name_or_throw("primary_power_coil")->visible = false;
            primary_power_coil_collected = true;
         }},
      };
      return;


  - name: u
    type: std::string
    parameters:
      - name: string
        type: std::string
        default_argument: '"[unset-string]"'
    body: |
      return AllegroFlare::StringTransformer(string).upcase().get_text();
    body_dependency_symbols:
      - AllegroFlare::StringTransformer
 


  - name: build_dialog_node_bank
    virtual: true
    override: true
    type: AllegroFlare::DialogTree::NodeBank
    body: |
      AllegroFlare::DialogTree::NodeBank result;
      result.set_nodes({

         //console-01-dialog

         { "console-01-dialog", new AllegroFlare::DialogTree::Nodes::MultipageWithOptions(
               "System",
               { u("What would you like to do?") },
               {
                  { "Disable lock on F1 MegaDoor", new AllegroFlare::DialogTree::NodeOptions::GoToNode("unlock_mega_door"), 0 },
                  { "Exit", new AllegroFlare::DialogTree::NodeOptions::ExitDialog(), 0 },
               }
            )
         },
         { "console-02-dialog", new AllegroFlare::DialogTree::Nodes::MultipageWithOptions(
               "System",
               { u("What would you like to do?") },
               {
                  { "Unlock Elevator 1", new AllegroFlare::DialogTree::NodeOptions::GoToNode("unlock_elevator_1"), 0 },
                  { "Exit", new AllegroFlare::DialogTree::NodeOptions::ExitDialog(), 0 },
               }
            )
         },
         { "console-03-dialog", new AllegroFlare::DialogTree::Nodes::MultipageWithOptions(
               "System",
               { u("What would you like to do?") },
               {
                  { "Unlock Elevator 2", new AllegroFlare::DialogTree::NodeOptions::GoToNode("unlock_elevator_2"), 0 },
                  { "Exit", new AllegroFlare::DialogTree::NodeOptions::ExitDialog(), 0 },
               }
            )
         },
         { "console-04-dialog", new AllegroFlare::DialogTree::Nodes::MultipageWithOptions(
               "System",
               { u("What would you like to do?") },
               {
                  { "Unlock VR Room", new AllegroFlare::DialogTree::NodeOptions::GoToNode("unlock_vr_room"), 0 },
                  { "Exit", new AllegroFlare::DialogTree::NodeOptions::ExitDialog(), 0 },
               }
            )
         },
         { "console-05-dialog", new AllegroFlare::DialogTree::Nodes::MultipageWithOptions(
               "System",
               { u("What would you like to do?") },
               {
                  { "Unlock Elevator 3", new AllegroFlare::DialogTree::NodeOptions::GoToNode("unlock_elevator_3"), 0 },
                  { "Exit", new AllegroFlare::DialogTree::NodeOptions::ExitDialog(), 0 },
               }
            )
         },
         { "console-06-dialog", new AllegroFlare::DialogTree::Nodes::MultipageWithOptions(
               "System",
               { u("What would you like to do?") },
               {
                  { "Unlock Last Elevator", new AllegroFlare::DialogTree::NodeOptions::GoToNode("unlock_elevator_4"), 0 },
                  { "Exit", new AllegroFlare::DialogTree::NodeOptions::ExitDialog(), 0 },
               }
            )
         },
         { "locked_door", new AllegroFlare::DialogTree::Nodes::MultipageWithOptions(
               "",
               { u("This door is locked.") },
               {
                  //{ "Advance", nullptr, 0 }, // Should be close dialog
                  { "Exit", new AllegroFlare::DialogTree::NodeOptions::ExitDialog(), 0 },
               }
            )
         },
         { "unlock_mega_door", new AllegroFlare::DialogTree::Nodes::EmitGameEvent("unlock_mega_door", "exit_dialog")
         },
         { "unlock_elevator_1", new AllegroFlare::DialogTree::Nodes::EmitGameEvent("unlock_elevator_1", "exit_dialog")
         },
         { "unlock_elevator_2", new AllegroFlare::DialogTree::Nodes::EmitGameEvent("unlock_elevator_2", "exit_dialog")
         },
         { "unlock_elevator_3", new AllegroFlare::DialogTree::Nodes::EmitGameEvent("unlock_elevator_3", "exit_dialog")
         },
         { "unlock_elevator_4", new AllegroFlare::DialogTree::Nodes::EmitGameEvent("unlock_elevator_4", "exit_dialog")
         },
         { "unlock_vr_room", new AllegroFlare::DialogTree::Nodes::EmitGameEvent("unlock_vr_room", "exit_dialog")
         },

         { "exit_dialog", new AllegroFlare::DialogTree::Nodes::ExitDialog()
         },









         { "hydroflora", new AllegroFlare::DialogTree::Nodes::MultipageWithOptions(
               "Hydroflora",
               { "Alien mushroom with a green cap and vibrant purple stem." },
               {
                  //{ "Advance", nullptr, 0 }, // Should be close dialog
                  { "Exit", new AllegroFlare::DialogTree::NodeOptions::ExitDialog(), 0 },
               }
            )
         },
         { "default_inspect_fallback", new AllegroFlare::DialogTree::Nodes::MultipageWithOptions(
               "",
               { "There doesn't seem to be anything of importance here." },
               {
                  //{ "Advance", nullptr, 0 }, // Should be close dialog
                  { "Exit", new AllegroFlare::DialogTree::NodeOptions::ExitDialog(), 0 },
               }
            )
         },
         { "station_alarm_is_activated", new AllegroFlare::DialogTree::Nodes::MultipageWithOptions(
               "Control System",
               //{ "There doesn't seem to be anything of importance here." },
               {
                  "IMPORTANT: An alarm was triggered from the outside deck.",
                  "This is an emergency sitation.",
                  "A system outside the ship has been damaged. You must be repair it.",
                  "The space suit cabinet has been unlocked. Collect the space suit "
                     "and exit the airlock onto the deck to perform repairs.",
               },
               {
                  //{ "Advance", nullptr, 0 }, // Should be close dialog
                  { "Exit", new AllegroFlare::DialogTree::NodeOptions::ExitDialog(), 0 },
               }
            )
         },


         { "inspect_cryo_pod", new AllegroFlare::DialogTree::Nodes::MultipageWithOptions(
               "Cryo Pod",
               { "Used for suspending life forms for extended periods of time. Can also be used for general "
                  "surgeries, medical proceedures, or adminstration of chemicals." },
               {
                  //{ "Advance", nullptr, 0 }, // Should be close dialog
                  { "Exit", new AllegroFlare::DialogTree::NodeOptions::ExitDialog(), 0 },
               }
            )
         },
         { "inspect_engine_core", new AllegroFlare::DialogTree::Nodes::MultipageWithOptions(
               "Engine Core",
               { "The primary power source for the ship. The Entinite core provides power for all "
                    "systems on the ship, including thrust, stabilization, and life support." },
               {
                  //{ "Advance", nullptr, 0 }, // Should be close dialog
                  { "Exit", new AllegroFlare::DialogTree::NodeOptions::ExitDialog(), 0 },
               }
            )
         },
         { "inspect_airlock_door_when_locked", new AllegroFlare::DialogTree::Nodes::MultipageWithOptions(
               "Airlock Door",
               { "This is the only exit to the space station's exterior.",
                 "You cannot go outside without wearing a space suit." },
               {
                  //{ "Advance", nullptr, 0 }, // Should be close dialog
                  { "Exit", new AllegroFlare::DialogTree::NodeOptions::ExitDialog(), 0 },
               }
            )
         },
      });
      return result;
    body_dependency_symbols:
      - AllegroFlare::DialogTree::Nodes::MultipageWithOptions
      - AllegroFlare::DialogTree::NodeOptions::ExitDialog
      - AllegroFlare::DialogTree::NodeOptions::GoToNode


  - name: obtain_hud_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin->auto_get("Oswald-Medium.ttf -52");


dependencies:


  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: Krampus24::Gameplay::ScriptingInterface
    headers: [ Krampus24/Gameplay/ScriptingInterface.hpp ]
  - symbol: Krampus24::Gameplay::Entities::Base
    headers: [ Krampus24/Gameplay/Entities/Base.hpp ]
  - symbol: AllegroFlare::CollisionObservers::Simple
    headers: [ AllegroFlare/CollisionObservers/Simple.hpp ]
  - symbol: Krampus24::Gameplay::Screen
    headers: [ Krampus24/Gameplay/Screen.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: Krampus24::Gameplay::Entities::Door::Style
    headers: [ Krampus24/Gameplay/Entities/Door.hpp ]
  - symbol: Krampus24::Gameplay::Entities::SlidingDoor
    headers: [ Krampus24/Gameplay/Entities/SlidingDoor.hpp ]
  - symbol: Krampus24::Gameplay::Entities::MegaDoor
    headers: [ Krampus24/Gameplay/Entities/MegaDoor.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: Krampus24::Game::DialogBuilder
    headers: [ Krampus24/Game/DialogBuilder.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeBank
    headers: [ AllegroFlare/DialogTree/NodeBank.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::MultipageWithOptions
    headers: [ AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::ExitDialog
    headers: [ AllegroFlare/DialogTree/NodeOptions/ExitDialog.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::GoToNode
    headers: [ AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp ]
  - symbol: AllegroFlare::DialogSystem::DialogSystem
    headers: [ AllegroFlare/DialogSystem/DialogSystem.hpp ]
  - symbol: AllegroFlare::StringTransformer
    headers: [ AllegroFlare/StringTransformer.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: Krampus24::Gameplay::Entities::ElevatorShaft
    headers: [ Krampus24/Gameplay/Entities/ElevatorShaft.hpp ]


